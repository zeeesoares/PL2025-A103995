Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMI block DOT
Rule 2     block -> declaration_section func_section declaration_section compound_section
Rule 3     block -> declaration_section compound_section
Rule 4     declaration_section -> <empty>
Rule 5     declaration_section -> VAR declaration_list
Rule 6     declaration_list -> declaration
Rule 7     declaration_list -> declaration_list declaration
Rule 8     declaration -> id_list COLON type SEMI
Rule 9     id_list -> ID
Rule 10    id_list -> id_list COMMA ID
Rule 11    type -> INTEGER
Rule 12    type -> BOOLEAN
Rule 13    type -> STRING
Rule 14    type -> REAL
Rule 15    type -> ARRAY LBRACK NUMBER DOTDOT NUMBER RBRACK OF type
Rule 16    func_section -> <empty>
Rule 17    func_section -> func_section func_declaration
Rule 18    func_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMI block SEMI
Rule 19    func_declaration -> PROCEDURE ID LPAREN parameters RPAREN SEMI block SEMI
Rule 20    parameters -> <empty>
Rule 21    parameters -> parameter_list
Rule 22    parameter_list -> parameter
Rule 23    parameter_list -> parameter_list SEMI parameter
Rule 24    parameter -> id_list COLON type
Rule 25    compound_section -> BEGIN statement_list END
Rule 26    statement_list -> statement
Rule 27    statement_list -> statement_list SEMI statement
Rule 28    statement -> assign_statement
Rule 29    statement -> if_statement
Rule 30    statement -> while_statement
Rule 31    statement -> for_statement
Rule 32    statement -> repeat_statement
Rule 33    statement -> compound_section_block
Rule 34    statement -> function_call
Rule 35    statement -> write_statement
Rule 36    statement -> read_statement
Rule 37    statement -> <empty>
Rule 38    compound_section_block -> BEGIN statement_list END
Rule 39    assign_statement -> variable ASSIGN expression
Rule 40    variable -> ID
Rule 41    variable -> ID LBRACK expression RBRACK
Rule 42    if_statement -> IF expression THEN statement
Rule 43    if_statement -> IF expression THEN statement ELSE statement
Rule 44    while_statement -> WHILE expression DO statement
Rule 45    for_statement -> FOR variable ASSIGN expression TO expression DO statement
Rule 46    for_statement -> FOR variable ASSIGN expression DOWNTO expression DO statement
Rule 47    repeat_statement -> REPEAT statement_list UNTIL expression
Rule 48    function_call -> ID LPAREN argument_list RPAREN
Rule 49    argument_list -> <empty>
Rule 50    argument_list -> expression
Rule 51    argument_list -> argument_list COMMA expression
Rule 52    write_statement -> write_func LPAREN output_list RPAREN
Rule 53    write_func -> WRITE
Rule 54    write_func -> WRITELN
Rule 55    read_statement -> read_func LPAREN variable_list RPAREN
Rule 56    read_func -> READ
Rule 57    read_func -> READLN
Rule 58    output_list -> expression
Rule 59    output_list -> output_list COMMA expression
Rule 60    variable_list -> variable
Rule 61    variable_list -> variable_list COMMA variable
Rule 62    expression -> logical_expression
Rule 63    logical_expression -> relational_expression
Rule 64    logical_expression -> logical_expression AND relational_expression
Rule 65    logical_expression -> logical_expression OR relational_expression
Rule 66    logical_expression -> NOT relational_expression
Rule 67    relational_expression -> addition_expression
Rule 68    relational_expression -> addition_expression relop addition_expression
Rule 69    relop -> EQ
Rule 70    relop -> NE
Rule 71    relop -> LT
Rule 72    relop -> LE
Rule 73    relop -> GT
Rule 74    relop -> GE
Rule 75    addition_expression -> mult_expression
Rule 76    addition_expression -> addition_expression addop mult_expression
Rule 77    addop -> PLUS
Rule 78    addop -> MINUS
Rule 79    mult_expression -> unary_expression
Rule 80    mult_expression -> mult_expression mulop unary_expression
Rule 81    mulop -> TIMES
Rule 82    mulop -> DIVIDE
Rule 83    mulop -> DIV
Rule 84    mulop -> MOD
Rule 85    unary_expression -> primary_expression
Rule 86    unary_expression -> sign unary_expression
Rule 87    sign -> PLUS
Rule 88    sign -> MINUS
Rule 89    primary_expression -> variable
Rule 90    primary_expression -> NUMBER
Rule 91    primary_expression -> STRING_LITERAL
Rule 92    primary_expression -> TRUE
Rule 93    primary_expression -> FALSE
Rule 94    primary_expression -> LPAREN expression RPAREN
Rule 95    primary_expression -> function_call
Rule 96    primary_expression -> CHAR_LITERAL

Terminals, with rules where they appear

AND                  : 64
ARRAY                : 15
ASSIGN               : 39 45 46
BEGIN                : 25 38
BOOLEAN              : 12
CHAR_LITERAL         : 96
COLON                : 8 18 24
COMMA                : 10 51 59 61
DIV                  : 83
DIVIDE               : 82
DO                   : 44 45 46
DOT                  : 1
DOTDOT               : 15
DOWNTO               : 46
ELSE                 : 43
END                  : 25 38
EQ                   : 69
FALSE                : 93
FOR                  : 45 46
FUNCTION             : 18
GE                   : 74
GT                   : 73
ID                   : 1 9 10 18 19 40 41 48
IF                   : 42 43
INTEGER              : 11
LBRACK               : 15 41
LE                   : 72
LPAREN               : 18 19 48 52 55 94
LT                   : 71
MINUS                : 78 88
MOD                  : 84
NE                   : 70
NOT                  : 66
NUMBER               : 15 15 90
OF                   : 15
OR                   : 65
PLUS                 : 77 87
PROCEDURE            : 19
PROGRAM              : 1
RBRACK               : 15 41
READ                 : 56
READLN               : 57
REAL                 : 14
REPEAT               : 47
RPAREN               : 18 19 48 52 55 94
SEMI                 : 1 8 18 18 19 19 23 27
STRING               : 13
STRING_LITERAL       : 91
THEN                 : 42 43
TIMES                : 81
TO                   : 45
TRUE                 : 92
UNTIL                : 47
VAR                  : 5
WHILE                : 44
WRITE                : 53
WRITELN              : 54
error                : 

Nonterminals, with rules where they appear

addition_expression  : 67 68 68 76
addop                : 76
argument_list        : 48 51
assign_statement     : 28
block                : 1 18 19
compound_section     : 2 3
compound_section_block : 33
declaration          : 6 7
declaration_list     : 5 7
declaration_section  : 2 2 3
expression           : 39 41 42 43 44 45 45 46 46 47 50 51 58 59 94
for_statement        : 31
func_declaration     : 17
func_section         : 2 17
function_call        : 34 95
id_list              : 8 10 24
if_statement         : 29
logical_expression   : 62 64 65
mulop                : 80
mult_expression      : 75 76 80
output_list          : 52 59
parameter            : 22 23
parameter_list       : 21 23
parameters           : 18 19
primary_expression   : 85
program              : 0
read_func            : 55
read_statement       : 36
relational_expression : 63 64 65 66
relop                : 68
repeat_statement     : 32
sign                 : 86
statement            : 26 27 42 43 43 44 45 46
statement_list       : 25 27 38 47
type                 : 8 15 18 24
unary_expression     : 79 80 86
variable             : 39 45 46 60 61 89
variable_list        : 55 61
while_statement      : 30
write_func           : 52
write_statement      : 35

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMI block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMI block DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMI block DOT

    SEMI            shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMI . block DOT
    (2) block -> . declaration_section func_section declaration_section compound_section
    (3) block -> . declaration_section compound_section
    (4) declaration_section -> .
    (5) declaration_section -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    BEGIN           reduce using rule 4 (declaration_section -> .)
    FUNCTION        reduce using rule 4 (declaration_section -> .)
    PROCEDURE       reduce using rule 4 (declaration_section -> .)
    VAR             shift and go to state 7

  ! VAR             [ reduce using rule 4 (declaration_section -> .) ]

    block                          shift and go to state 5
    declaration_section            shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMI block . DOT

    DOT             shift and go to state 8


state 6

    (2) block -> declaration_section . func_section declaration_section compound_section
    (3) block -> declaration_section . compound_section
    (16) func_section -> .
    (17) func_section -> . func_section func_declaration
    (25) compound_section -> . BEGIN statement_list END

  ! shift/reduce conflict for BEGIN resolved as shift
    VAR             reduce using rule 16 (func_section -> .)
    FUNCTION        reduce using rule 16 (func_section -> .)
    PROCEDURE       reduce using rule 16 (func_section -> .)
    BEGIN           shift and go to state 11

  ! BEGIN           [ reduce using rule 16 (func_section -> .) ]

    func_section                   shift and go to state 9
    compound_section               shift and go to state 10

state 7

    (5) declaration_section -> VAR . declaration_list
    (6) declaration_list -> . declaration
    (7) declaration_list -> . declaration_list declaration
    (8) declaration -> . id_list COLON type SEMI
    (9) id_list -> . ID
    (10) id_list -> . id_list COMMA ID

    ID              shift and go to state 15

    declaration_list               shift and go to state 12
    declaration                    shift and go to state 13
    id_list                        shift and go to state 14

state 8

    (1) program -> PROGRAM ID SEMI block DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMI block DOT .)


state 9

    (2) block -> declaration_section func_section . declaration_section compound_section
    (17) func_section -> func_section . func_declaration
    (4) declaration_section -> .
    (5) declaration_section -> . VAR declaration_list
    (18) func_declaration -> . FUNCTION ID LPAREN parameters RPAREN COLON type SEMI block SEMI
    (19) func_declaration -> . PROCEDURE ID LPAREN parameters RPAREN SEMI block SEMI

    BEGIN           reduce using rule 4 (declaration_section -> .)
    VAR             shift and go to state 7
    FUNCTION        shift and go to state 18
    PROCEDURE       shift and go to state 19

    declaration_section            shift and go to state 16
    func_declaration               shift and go to state 17

state 10

    (3) block -> declaration_section compound_section .

    DOT             reduce using rule 3 (block -> declaration_section compound_section .)
    SEMI            reduce using rule 3 (block -> declaration_section compound_section .)


state 11

    (25) compound_section -> BEGIN . statement_list END
    (26) statement_list -> . statement
    (27) statement_list -> . statement_list SEMI statement
    (28) statement -> . assign_statement
    (29) statement -> . if_statement
    (30) statement -> . while_statement
    (31) statement -> . for_statement
    (32) statement -> . repeat_statement
    (33) statement -> . compound_section_block
    (34) statement -> . function_call
    (35) statement -> . write_statement
    (36) statement -> . read_statement
    (37) statement -> .
    (39) assign_statement -> . variable ASSIGN expression
    (42) if_statement -> . IF expression THEN statement
    (43) if_statement -> . IF expression THEN statement ELSE statement
    (44) while_statement -> . WHILE expression DO statement
    (45) for_statement -> . FOR variable ASSIGN expression TO expression DO statement
    (46) for_statement -> . FOR variable ASSIGN expression DOWNTO expression DO statement
    (47) repeat_statement -> . REPEAT statement_list UNTIL expression
    (38) compound_section_block -> . BEGIN statement_list END
    (48) function_call -> . ID LPAREN argument_list RPAREN
    (52) write_statement -> . write_func LPAREN output_list RPAREN
    (55) read_statement -> . read_func LPAREN variable_list RPAREN
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (53) write_func -> . WRITE
    (54) write_func -> . WRITELN
    (56) read_func -> . READ
    (57) read_func -> . READLN

    END             reduce using rule 37 (statement -> .)
    SEMI            reduce using rule 37 (statement -> .)
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    BEGIN           shift and go to state 20
    ID              shift and go to state 37
    WRITE           shift and go to state 40
    WRITELN         shift and go to state 41
    READ            shift and go to state 42
    READLN          shift and go to state 43

    statement_list                 shift and go to state 21
    statement                      shift and go to state 22
    assign_statement               shift and go to state 23
    if_statement                   shift and go to state 24
    while_statement                shift and go to state 25
    for_statement                  shift and go to state 26
    repeat_statement               shift and go to state 27
    compound_section_block         shift and go to state 28
    function_call                  shift and go to state 29
    write_statement                shift and go to state 30
    read_statement                 shift and go to state 31
    variable                       shift and go to state 32
    write_func                     shift and go to state 38
    read_func                      shift and go to state 39

state 12

    (5) declaration_section -> VAR declaration_list .
    (7) declaration_list -> declaration_list . declaration
    (8) declaration -> . id_list COLON type SEMI
    (9) id_list -> . ID
    (10) id_list -> . id_list COMMA ID

    BEGIN           reduce using rule 5 (declaration_section -> VAR declaration_list .)
    VAR             reduce using rule 5 (declaration_section -> VAR declaration_list .)
    FUNCTION        reduce using rule 5 (declaration_section -> VAR declaration_list .)
    PROCEDURE       reduce using rule 5 (declaration_section -> VAR declaration_list .)
    ID              shift and go to state 15

    declaration                    shift and go to state 44
    id_list                        shift and go to state 14

state 13

    (6) declaration_list -> declaration .

    ID              reduce using rule 6 (declaration_list -> declaration .)
    BEGIN           reduce using rule 6 (declaration_list -> declaration .)
    VAR             reduce using rule 6 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 6 (declaration_list -> declaration .)
    PROCEDURE       reduce using rule 6 (declaration_list -> declaration .)


state 14

    (8) declaration -> id_list . COLON type SEMI
    (10) id_list -> id_list . COMMA ID

    COLON           shift and go to state 45
    COMMA           shift and go to state 46


state 15

    (9) id_list -> ID .

    COLON           reduce using rule 9 (id_list -> ID .)
    COMMA           reduce using rule 9 (id_list -> ID .)


state 16

    (2) block -> declaration_section func_section declaration_section . compound_section
    (25) compound_section -> . BEGIN statement_list END

    BEGIN           shift and go to state 11

    compound_section               shift and go to state 47

state 17

    (17) func_section -> func_section func_declaration .

    VAR             reduce using rule 17 (func_section -> func_section func_declaration .)
    FUNCTION        reduce using rule 17 (func_section -> func_section func_declaration .)
    PROCEDURE       reduce using rule 17 (func_section -> func_section func_declaration .)
    BEGIN           reduce using rule 17 (func_section -> func_section func_declaration .)


state 18

    (18) func_declaration -> FUNCTION . ID LPAREN parameters RPAREN COLON type SEMI block SEMI

    ID              shift and go to state 48


state 19

    (19) func_declaration -> PROCEDURE . ID LPAREN parameters RPAREN SEMI block SEMI

    ID              shift and go to state 49


state 20

    (38) compound_section_block -> BEGIN . statement_list END
    (26) statement_list -> . statement
    (27) statement_list -> . statement_list SEMI statement
    (28) statement -> . assign_statement
    (29) statement -> . if_statement
    (30) statement -> . while_statement
    (31) statement -> . for_statement
    (32) statement -> . repeat_statement
    (33) statement -> . compound_section_block
    (34) statement -> . function_call
    (35) statement -> . write_statement
    (36) statement -> . read_statement
    (37) statement -> .
    (39) assign_statement -> . variable ASSIGN expression
    (42) if_statement -> . IF expression THEN statement
    (43) if_statement -> . IF expression THEN statement ELSE statement
    (44) while_statement -> . WHILE expression DO statement
    (45) for_statement -> . FOR variable ASSIGN expression TO expression DO statement
    (46) for_statement -> . FOR variable ASSIGN expression DOWNTO expression DO statement
    (47) repeat_statement -> . REPEAT statement_list UNTIL expression
    (38) compound_section_block -> . BEGIN statement_list END
    (48) function_call -> . ID LPAREN argument_list RPAREN
    (52) write_statement -> . write_func LPAREN output_list RPAREN
    (55) read_statement -> . read_func LPAREN variable_list RPAREN
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (53) write_func -> . WRITE
    (54) write_func -> . WRITELN
    (56) read_func -> . READ
    (57) read_func -> . READLN

    END             reduce using rule 37 (statement -> .)
    SEMI            reduce using rule 37 (statement -> .)
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    BEGIN           shift and go to state 20
    ID              shift and go to state 37
    WRITE           shift and go to state 40
    WRITELN         shift and go to state 41
    READ            shift and go to state 42
    READLN          shift and go to state 43

    statement_list                 shift and go to state 50
    statement                      shift and go to state 22
    assign_statement               shift and go to state 23
    if_statement                   shift and go to state 24
    while_statement                shift and go to state 25
    for_statement                  shift and go to state 26
    repeat_statement               shift and go to state 27
    compound_section_block         shift and go to state 28
    function_call                  shift and go to state 29
    write_statement                shift and go to state 30
    read_statement                 shift and go to state 31
    variable                       shift and go to state 32
    write_func                     shift and go to state 38
    read_func                      shift and go to state 39

state 21

    (25) compound_section -> BEGIN statement_list . END
    (27) statement_list -> statement_list . SEMI statement

    END             shift and go to state 51
    SEMI            shift and go to state 52


state 22

    (26) statement_list -> statement .

    END             reduce using rule 26 (statement_list -> statement .)
    SEMI            reduce using rule 26 (statement_list -> statement .)
    UNTIL           reduce using rule 26 (statement_list -> statement .)


state 23

    (28) statement -> assign_statement .

    END             reduce using rule 28 (statement -> assign_statement .)
    SEMI            reduce using rule 28 (statement -> assign_statement .)
    UNTIL           reduce using rule 28 (statement -> assign_statement .)
    ELSE            reduce using rule 28 (statement -> assign_statement .)


state 24

    (29) statement -> if_statement .

    END             reduce using rule 29 (statement -> if_statement .)
    SEMI            reduce using rule 29 (statement -> if_statement .)
    UNTIL           reduce using rule 29 (statement -> if_statement .)
    ELSE            reduce using rule 29 (statement -> if_statement .)


state 25

    (30) statement -> while_statement .

    END             reduce using rule 30 (statement -> while_statement .)
    SEMI            reduce using rule 30 (statement -> while_statement .)
    UNTIL           reduce using rule 30 (statement -> while_statement .)
    ELSE            reduce using rule 30 (statement -> while_statement .)


state 26

    (31) statement -> for_statement .

    END             reduce using rule 31 (statement -> for_statement .)
    SEMI            reduce using rule 31 (statement -> for_statement .)
    UNTIL           reduce using rule 31 (statement -> for_statement .)
    ELSE            reduce using rule 31 (statement -> for_statement .)


state 27

    (32) statement -> repeat_statement .

    END             reduce using rule 32 (statement -> repeat_statement .)
    SEMI            reduce using rule 32 (statement -> repeat_statement .)
    UNTIL           reduce using rule 32 (statement -> repeat_statement .)
    ELSE            reduce using rule 32 (statement -> repeat_statement .)


state 28

    (33) statement -> compound_section_block .

    END             reduce using rule 33 (statement -> compound_section_block .)
    SEMI            reduce using rule 33 (statement -> compound_section_block .)
    UNTIL           reduce using rule 33 (statement -> compound_section_block .)
    ELSE            reduce using rule 33 (statement -> compound_section_block .)


state 29

    (34) statement -> function_call .

    END             reduce using rule 34 (statement -> function_call .)
    SEMI            reduce using rule 34 (statement -> function_call .)
    UNTIL           reduce using rule 34 (statement -> function_call .)
    ELSE            reduce using rule 34 (statement -> function_call .)


state 30

    (35) statement -> write_statement .

    END             reduce using rule 35 (statement -> write_statement .)
    SEMI            reduce using rule 35 (statement -> write_statement .)
    UNTIL           reduce using rule 35 (statement -> write_statement .)
    ELSE            reduce using rule 35 (statement -> write_statement .)


state 31

    (36) statement -> read_statement .

    END             reduce using rule 36 (statement -> read_statement .)
    SEMI            reduce using rule 36 (statement -> read_statement .)
    UNTIL           reduce using rule 36 (statement -> read_statement .)
    ELSE            reduce using rule 36 (statement -> read_statement .)


state 32

    (39) assign_statement -> variable . ASSIGN expression

    ASSIGN          shift and go to state 53


state 33

    (42) if_statement -> IF . expression THEN statement
    (43) if_statement -> IF . expression THEN statement ELSE statement
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 54
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 34

    (44) while_statement -> WHILE . expression DO statement
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 74
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 35

    (45) for_statement -> FOR . variable ASSIGN expression TO expression DO statement
    (46) for_statement -> FOR . variable ASSIGN expression DOWNTO expression DO statement
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK

    ID              shift and go to state 76

    variable                       shift and go to state 75

state 36

    (47) repeat_statement -> REPEAT . statement_list UNTIL expression
    (26) statement_list -> . statement
    (27) statement_list -> . statement_list SEMI statement
    (28) statement -> . assign_statement
    (29) statement -> . if_statement
    (30) statement -> . while_statement
    (31) statement -> . for_statement
    (32) statement -> . repeat_statement
    (33) statement -> . compound_section_block
    (34) statement -> . function_call
    (35) statement -> . write_statement
    (36) statement -> . read_statement
    (37) statement -> .
    (39) assign_statement -> . variable ASSIGN expression
    (42) if_statement -> . IF expression THEN statement
    (43) if_statement -> . IF expression THEN statement ELSE statement
    (44) while_statement -> . WHILE expression DO statement
    (45) for_statement -> . FOR variable ASSIGN expression TO expression DO statement
    (46) for_statement -> . FOR variable ASSIGN expression DOWNTO expression DO statement
    (47) repeat_statement -> . REPEAT statement_list UNTIL expression
    (38) compound_section_block -> . BEGIN statement_list END
    (48) function_call -> . ID LPAREN argument_list RPAREN
    (52) write_statement -> . write_func LPAREN output_list RPAREN
    (55) read_statement -> . read_func LPAREN variable_list RPAREN
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (53) write_func -> . WRITE
    (54) write_func -> . WRITELN
    (56) read_func -> . READ
    (57) read_func -> . READLN

    UNTIL           reduce using rule 37 (statement -> .)
    SEMI            reduce using rule 37 (statement -> .)
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    BEGIN           shift and go to state 20
    ID              shift and go to state 37
    WRITE           shift and go to state 40
    WRITELN         shift and go to state 41
    READ            shift and go to state 42
    READLN          shift and go to state 43

    statement_list                 shift and go to state 77
    statement                      shift and go to state 22
    assign_statement               shift and go to state 23
    if_statement                   shift and go to state 24
    while_statement                shift and go to state 25
    for_statement                  shift and go to state 26
    repeat_statement               shift and go to state 27
    compound_section_block         shift and go to state 28
    function_call                  shift and go to state 29
    write_statement                shift and go to state 30
    read_statement                 shift and go to state 31
    variable                       shift and go to state 32
    write_func                     shift and go to state 38
    read_func                      shift and go to state 39

state 37

    (48) function_call -> ID . LPAREN argument_list RPAREN
    (40) variable -> ID .
    (41) variable -> ID . LBRACK expression RBRACK

    LPAREN          shift and go to state 78
    ASSIGN          reduce using rule 40 (variable -> ID .)
    LBRACK          shift and go to state 79


state 38

    (52) write_statement -> write_func . LPAREN output_list RPAREN

    LPAREN          shift and go to state 80


state 39

    (55) read_statement -> read_func . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 81


state 40

    (53) write_func -> WRITE .

    LPAREN          reduce using rule 53 (write_func -> WRITE .)


state 41

    (54) write_func -> WRITELN .

    LPAREN          reduce using rule 54 (write_func -> WRITELN .)


state 42

    (56) read_func -> READ .

    LPAREN          reduce using rule 56 (read_func -> READ .)


state 43

    (57) read_func -> READLN .

    LPAREN          reduce using rule 57 (read_func -> READLN .)


state 44

    (7) declaration_list -> declaration_list declaration .

    ID              reduce using rule 7 (declaration_list -> declaration_list declaration .)
    BEGIN           reduce using rule 7 (declaration_list -> declaration_list declaration .)
    VAR             reduce using rule 7 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 7 (declaration_list -> declaration_list declaration .)
    PROCEDURE       reduce using rule 7 (declaration_list -> declaration_list declaration .)


state 45

    (8) declaration -> id_list COLON . type SEMI
    (11) type -> . INTEGER
    (12) type -> . BOOLEAN
    (13) type -> . STRING
    (14) type -> . REAL
    (15) type -> . ARRAY LBRACK NUMBER DOTDOT NUMBER RBRACK OF type

    INTEGER         shift and go to state 83
    BOOLEAN         shift and go to state 84
    STRING          shift and go to state 85
    REAL            shift and go to state 86
    ARRAY           shift and go to state 87

    type                           shift and go to state 82

state 46

    (10) id_list -> id_list COMMA . ID

    ID              shift and go to state 88


state 47

    (2) block -> declaration_section func_section declaration_section compound_section .

    DOT             reduce using rule 2 (block -> declaration_section func_section declaration_section compound_section .)
    SEMI            reduce using rule 2 (block -> declaration_section func_section declaration_section compound_section .)


state 48

    (18) func_declaration -> FUNCTION ID . LPAREN parameters RPAREN COLON type SEMI block SEMI

    LPAREN          shift and go to state 89


state 49

    (19) func_declaration -> PROCEDURE ID . LPAREN parameters RPAREN SEMI block SEMI

    LPAREN          shift and go to state 90


state 50

    (38) compound_section_block -> BEGIN statement_list . END
    (27) statement_list -> statement_list . SEMI statement

    END             shift and go to state 91
    SEMI            shift and go to state 52


state 51

    (25) compound_section -> BEGIN statement_list END .

    DOT             reduce using rule 25 (compound_section -> BEGIN statement_list END .)
    SEMI            reduce using rule 25 (compound_section -> BEGIN statement_list END .)


state 52

    (27) statement_list -> statement_list SEMI . statement
    (28) statement -> . assign_statement
    (29) statement -> . if_statement
    (30) statement -> . while_statement
    (31) statement -> . for_statement
    (32) statement -> . repeat_statement
    (33) statement -> . compound_section_block
    (34) statement -> . function_call
    (35) statement -> . write_statement
    (36) statement -> . read_statement
    (37) statement -> .
    (39) assign_statement -> . variable ASSIGN expression
    (42) if_statement -> . IF expression THEN statement
    (43) if_statement -> . IF expression THEN statement ELSE statement
    (44) while_statement -> . WHILE expression DO statement
    (45) for_statement -> . FOR variable ASSIGN expression TO expression DO statement
    (46) for_statement -> . FOR variable ASSIGN expression DOWNTO expression DO statement
    (47) repeat_statement -> . REPEAT statement_list UNTIL expression
    (38) compound_section_block -> . BEGIN statement_list END
    (48) function_call -> . ID LPAREN argument_list RPAREN
    (52) write_statement -> . write_func LPAREN output_list RPAREN
    (55) read_statement -> . read_func LPAREN variable_list RPAREN
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (53) write_func -> . WRITE
    (54) write_func -> . WRITELN
    (56) read_func -> . READ
    (57) read_func -> . READLN

    END             reduce using rule 37 (statement -> .)
    SEMI            reduce using rule 37 (statement -> .)
    UNTIL           reduce using rule 37 (statement -> .)
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    BEGIN           shift and go to state 20
    ID              shift and go to state 37
    WRITE           shift and go to state 40
    WRITELN         shift and go to state 41
    READ            shift and go to state 42
    READLN          shift and go to state 43

    statement                      shift and go to state 92
    assign_statement               shift and go to state 23
    if_statement                   shift and go to state 24
    while_statement                shift and go to state 25
    for_statement                  shift and go to state 26
    repeat_statement               shift and go to state 27
    compound_section_block         shift and go to state 28
    function_call                  shift and go to state 29
    write_statement                shift and go to state 30
    read_statement                 shift and go to state 31
    variable                       shift and go to state 32
    write_func                     shift and go to state 38
    read_func                      shift and go to state 39

state 53

    (39) assign_statement -> variable ASSIGN . expression
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    variable                       shift and go to state 63
    expression                     shift and go to state 93
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    function_call                  shift and go to state 69

state 54

    (42) if_statement -> IF expression . THEN statement
    (43) if_statement -> IF expression . THEN statement ELSE statement

    THEN            shift and go to state 94


state 55

    (62) expression -> logical_expression .
    (64) logical_expression -> logical_expression . AND relational_expression
    (65) logical_expression -> logical_expression . OR relational_expression

    THEN            reduce using rule 62 (expression -> logical_expression .)
    DO              reduce using rule 62 (expression -> logical_expression .)
    END             reduce using rule 62 (expression -> logical_expression .)
    SEMI            reduce using rule 62 (expression -> logical_expression .)
    UNTIL           reduce using rule 62 (expression -> logical_expression .)
    ELSE            reduce using rule 62 (expression -> logical_expression .)
    RPAREN          reduce using rule 62 (expression -> logical_expression .)
    COMMA           reduce using rule 62 (expression -> logical_expression .)
    RBRACK          reduce using rule 62 (expression -> logical_expression .)
    TO              reduce using rule 62 (expression -> logical_expression .)
    DOWNTO          reduce using rule 62 (expression -> logical_expression .)
    AND             shift and go to state 95
    OR              shift and go to state 96


state 56

    (63) logical_expression -> relational_expression .

    AND             reduce using rule 63 (logical_expression -> relational_expression .)
    OR              reduce using rule 63 (logical_expression -> relational_expression .)
    THEN            reduce using rule 63 (logical_expression -> relational_expression .)
    DO              reduce using rule 63 (logical_expression -> relational_expression .)
    END             reduce using rule 63 (logical_expression -> relational_expression .)
    SEMI            reduce using rule 63 (logical_expression -> relational_expression .)
    UNTIL           reduce using rule 63 (logical_expression -> relational_expression .)
    ELSE            reduce using rule 63 (logical_expression -> relational_expression .)
    RPAREN          reduce using rule 63 (logical_expression -> relational_expression .)
    COMMA           reduce using rule 63 (logical_expression -> relational_expression .)
    RBRACK          reduce using rule 63 (logical_expression -> relational_expression .)
    TO              reduce using rule 63 (logical_expression -> relational_expression .)
    DOWNTO          reduce using rule 63 (logical_expression -> relational_expression .)


state 57

    (66) logical_expression -> NOT . relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    relational_expression          shift and go to state 97
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 58

    (67) relational_expression -> addition_expression .
    (68) relational_expression -> addition_expression . relop addition_expression
    (76) addition_expression -> addition_expression . addop mult_expression
    (69) relop -> . EQ
    (70) relop -> . NE
    (71) relop -> . LT
    (72) relop -> . LE
    (73) relop -> . GT
    (74) relop -> . GE
    (77) addop -> . PLUS
    (78) addop -> . MINUS

    AND             reduce using rule 67 (relational_expression -> addition_expression .)
    OR              reduce using rule 67 (relational_expression -> addition_expression .)
    THEN            reduce using rule 67 (relational_expression -> addition_expression .)
    DO              reduce using rule 67 (relational_expression -> addition_expression .)
    END             reduce using rule 67 (relational_expression -> addition_expression .)
    SEMI            reduce using rule 67 (relational_expression -> addition_expression .)
    UNTIL           reduce using rule 67 (relational_expression -> addition_expression .)
    ELSE            reduce using rule 67 (relational_expression -> addition_expression .)
    RPAREN          reduce using rule 67 (relational_expression -> addition_expression .)
    COMMA           reduce using rule 67 (relational_expression -> addition_expression .)
    RBRACK          reduce using rule 67 (relational_expression -> addition_expression .)
    TO              reduce using rule 67 (relational_expression -> addition_expression .)
    DOWNTO          reduce using rule 67 (relational_expression -> addition_expression .)
    EQ              shift and go to state 100
    NE              shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

    relop                          shift and go to state 98
    addop                          shift and go to state 99

state 59

    (75) addition_expression -> mult_expression .
    (80) mult_expression -> mult_expression . mulop unary_expression
    (81) mulop -> . TIMES
    (82) mulop -> . DIVIDE
    (83) mulop -> . DIV
    (84) mulop -> . MOD

    EQ              reduce using rule 75 (addition_expression -> mult_expression .)
    NE              reduce using rule 75 (addition_expression -> mult_expression .)
    LT              reduce using rule 75 (addition_expression -> mult_expression .)
    LE              reduce using rule 75 (addition_expression -> mult_expression .)
    GT              reduce using rule 75 (addition_expression -> mult_expression .)
    GE              reduce using rule 75 (addition_expression -> mult_expression .)
    PLUS            reduce using rule 75 (addition_expression -> mult_expression .)
    MINUS           reduce using rule 75 (addition_expression -> mult_expression .)
    AND             reduce using rule 75 (addition_expression -> mult_expression .)
    OR              reduce using rule 75 (addition_expression -> mult_expression .)
    THEN            reduce using rule 75 (addition_expression -> mult_expression .)
    DO              reduce using rule 75 (addition_expression -> mult_expression .)
    END             reduce using rule 75 (addition_expression -> mult_expression .)
    SEMI            reduce using rule 75 (addition_expression -> mult_expression .)
    UNTIL           reduce using rule 75 (addition_expression -> mult_expression .)
    ELSE            reduce using rule 75 (addition_expression -> mult_expression .)
    RPAREN          reduce using rule 75 (addition_expression -> mult_expression .)
    COMMA           reduce using rule 75 (addition_expression -> mult_expression .)
    RBRACK          reduce using rule 75 (addition_expression -> mult_expression .)
    TO              reduce using rule 75 (addition_expression -> mult_expression .)
    DOWNTO          reduce using rule 75 (addition_expression -> mult_expression .)
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 110
    DIV             shift and go to state 111
    MOD             shift and go to state 112

    mulop                          shift and go to state 108

state 60

    (79) mult_expression -> unary_expression .

    TIMES           reduce using rule 79 (mult_expression -> unary_expression .)
    DIVIDE          reduce using rule 79 (mult_expression -> unary_expression .)
    DIV             reduce using rule 79 (mult_expression -> unary_expression .)
    MOD             reduce using rule 79 (mult_expression -> unary_expression .)
    EQ              reduce using rule 79 (mult_expression -> unary_expression .)
    NE              reduce using rule 79 (mult_expression -> unary_expression .)
    LT              reduce using rule 79 (mult_expression -> unary_expression .)
    LE              reduce using rule 79 (mult_expression -> unary_expression .)
    GT              reduce using rule 79 (mult_expression -> unary_expression .)
    GE              reduce using rule 79 (mult_expression -> unary_expression .)
    PLUS            reduce using rule 79 (mult_expression -> unary_expression .)
    MINUS           reduce using rule 79 (mult_expression -> unary_expression .)
    AND             reduce using rule 79 (mult_expression -> unary_expression .)
    OR              reduce using rule 79 (mult_expression -> unary_expression .)
    THEN            reduce using rule 79 (mult_expression -> unary_expression .)
    DO              reduce using rule 79 (mult_expression -> unary_expression .)
    END             reduce using rule 79 (mult_expression -> unary_expression .)
    SEMI            reduce using rule 79 (mult_expression -> unary_expression .)
    UNTIL           reduce using rule 79 (mult_expression -> unary_expression .)
    ELSE            reduce using rule 79 (mult_expression -> unary_expression .)
    RPAREN          reduce using rule 79 (mult_expression -> unary_expression .)
    COMMA           reduce using rule 79 (mult_expression -> unary_expression .)
    RBRACK          reduce using rule 79 (mult_expression -> unary_expression .)
    TO              reduce using rule 79 (mult_expression -> unary_expression .)
    DOWNTO          reduce using rule 79 (mult_expression -> unary_expression .)


state 61

    (85) unary_expression -> primary_expression .

    TIMES           reduce using rule 85 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 85 (unary_expression -> primary_expression .)
    DIV             reduce using rule 85 (unary_expression -> primary_expression .)
    MOD             reduce using rule 85 (unary_expression -> primary_expression .)
    EQ              reduce using rule 85 (unary_expression -> primary_expression .)
    NE              reduce using rule 85 (unary_expression -> primary_expression .)
    LT              reduce using rule 85 (unary_expression -> primary_expression .)
    LE              reduce using rule 85 (unary_expression -> primary_expression .)
    GT              reduce using rule 85 (unary_expression -> primary_expression .)
    GE              reduce using rule 85 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 85 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 85 (unary_expression -> primary_expression .)
    AND             reduce using rule 85 (unary_expression -> primary_expression .)
    OR              reduce using rule 85 (unary_expression -> primary_expression .)
    THEN            reduce using rule 85 (unary_expression -> primary_expression .)
    DO              reduce using rule 85 (unary_expression -> primary_expression .)
    END             reduce using rule 85 (unary_expression -> primary_expression .)
    SEMI            reduce using rule 85 (unary_expression -> primary_expression .)
    UNTIL           reduce using rule 85 (unary_expression -> primary_expression .)
    ELSE            reduce using rule 85 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 85 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 85 (unary_expression -> primary_expression .)
    RBRACK          reduce using rule 85 (unary_expression -> primary_expression .)
    TO              reduce using rule 85 (unary_expression -> primary_expression .)
    DOWNTO          reduce using rule 85 (unary_expression -> primary_expression .)


state 62

    (86) unary_expression -> sign . unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    sign                           shift and go to state 62
    unary_expression               shift and go to state 113
    primary_expression             shift and go to state 61
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 63

    (89) primary_expression -> variable .

    TIMES           reduce using rule 89 (primary_expression -> variable .)
    DIVIDE          reduce using rule 89 (primary_expression -> variable .)
    DIV             reduce using rule 89 (primary_expression -> variable .)
    MOD             reduce using rule 89 (primary_expression -> variable .)
    EQ              reduce using rule 89 (primary_expression -> variable .)
    NE              reduce using rule 89 (primary_expression -> variable .)
    LT              reduce using rule 89 (primary_expression -> variable .)
    LE              reduce using rule 89 (primary_expression -> variable .)
    GT              reduce using rule 89 (primary_expression -> variable .)
    GE              reduce using rule 89 (primary_expression -> variable .)
    PLUS            reduce using rule 89 (primary_expression -> variable .)
    MINUS           reduce using rule 89 (primary_expression -> variable .)
    AND             reduce using rule 89 (primary_expression -> variable .)
    OR              reduce using rule 89 (primary_expression -> variable .)
    THEN            reduce using rule 89 (primary_expression -> variable .)
    DO              reduce using rule 89 (primary_expression -> variable .)
    END             reduce using rule 89 (primary_expression -> variable .)
    SEMI            reduce using rule 89 (primary_expression -> variable .)
    UNTIL           reduce using rule 89 (primary_expression -> variable .)
    ELSE            reduce using rule 89 (primary_expression -> variable .)
    RPAREN          reduce using rule 89 (primary_expression -> variable .)
    COMMA           reduce using rule 89 (primary_expression -> variable .)
    RBRACK          reduce using rule 89 (primary_expression -> variable .)
    TO              reduce using rule 89 (primary_expression -> variable .)
    DOWNTO          reduce using rule 89 (primary_expression -> variable .)


state 64

    (90) primary_expression -> NUMBER .

    TIMES           reduce using rule 90 (primary_expression -> NUMBER .)
    DIVIDE          reduce using rule 90 (primary_expression -> NUMBER .)
    DIV             reduce using rule 90 (primary_expression -> NUMBER .)
    MOD             reduce using rule 90 (primary_expression -> NUMBER .)
    EQ              reduce using rule 90 (primary_expression -> NUMBER .)
    NE              reduce using rule 90 (primary_expression -> NUMBER .)
    LT              reduce using rule 90 (primary_expression -> NUMBER .)
    LE              reduce using rule 90 (primary_expression -> NUMBER .)
    GT              reduce using rule 90 (primary_expression -> NUMBER .)
    GE              reduce using rule 90 (primary_expression -> NUMBER .)
    PLUS            reduce using rule 90 (primary_expression -> NUMBER .)
    MINUS           reduce using rule 90 (primary_expression -> NUMBER .)
    AND             reduce using rule 90 (primary_expression -> NUMBER .)
    OR              reduce using rule 90 (primary_expression -> NUMBER .)
    THEN            reduce using rule 90 (primary_expression -> NUMBER .)
    DO              reduce using rule 90 (primary_expression -> NUMBER .)
    END             reduce using rule 90 (primary_expression -> NUMBER .)
    SEMI            reduce using rule 90 (primary_expression -> NUMBER .)
    UNTIL           reduce using rule 90 (primary_expression -> NUMBER .)
    ELSE            reduce using rule 90 (primary_expression -> NUMBER .)
    RPAREN          reduce using rule 90 (primary_expression -> NUMBER .)
    COMMA           reduce using rule 90 (primary_expression -> NUMBER .)
    RBRACK          reduce using rule 90 (primary_expression -> NUMBER .)
    TO              reduce using rule 90 (primary_expression -> NUMBER .)
    DOWNTO          reduce using rule 90 (primary_expression -> NUMBER .)


state 65

    (91) primary_expression -> STRING_LITERAL .

    TIMES           reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    DIV             reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    MOD             reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    EQ              reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    NE              reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    LT              reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    LE              reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    GT              reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    GE              reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    PLUS            reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    MINUS           reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    AND             reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    OR              reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    THEN            reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    DO              reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    END             reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    SEMI            reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    UNTIL           reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    ELSE            reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    COMMA           reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    RBRACK          reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    TO              reduce using rule 91 (primary_expression -> STRING_LITERAL .)
    DOWNTO          reduce using rule 91 (primary_expression -> STRING_LITERAL .)


state 66

    (92) primary_expression -> TRUE .

    TIMES           reduce using rule 92 (primary_expression -> TRUE .)
    DIVIDE          reduce using rule 92 (primary_expression -> TRUE .)
    DIV             reduce using rule 92 (primary_expression -> TRUE .)
    MOD             reduce using rule 92 (primary_expression -> TRUE .)
    EQ              reduce using rule 92 (primary_expression -> TRUE .)
    NE              reduce using rule 92 (primary_expression -> TRUE .)
    LT              reduce using rule 92 (primary_expression -> TRUE .)
    LE              reduce using rule 92 (primary_expression -> TRUE .)
    GT              reduce using rule 92 (primary_expression -> TRUE .)
    GE              reduce using rule 92 (primary_expression -> TRUE .)
    PLUS            reduce using rule 92 (primary_expression -> TRUE .)
    MINUS           reduce using rule 92 (primary_expression -> TRUE .)
    AND             reduce using rule 92 (primary_expression -> TRUE .)
    OR              reduce using rule 92 (primary_expression -> TRUE .)
    THEN            reduce using rule 92 (primary_expression -> TRUE .)
    DO              reduce using rule 92 (primary_expression -> TRUE .)
    END             reduce using rule 92 (primary_expression -> TRUE .)
    SEMI            reduce using rule 92 (primary_expression -> TRUE .)
    UNTIL           reduce using rule 92 (primary_expression -> TRUE .)
    ELSE            reduce using rule 92 (primary_expression -> TRUE .)
    RPAREN          reduce using rule 92 (primary_expression -> TRUE .)
    COMMA           reduce using rule 92 (primary_expression -> TRUE .)
    RBRACK          reduce using rule 92 (primary_expression -> TRUE .)
    TO              reduce using rule 92 (primary_expression -> TRUE .)
    DOWNTO          reduce using rule 92 (primary_expression -> TRUE .)


state 67

    (93) primary_expression -> FALSE .

    TIMES           reduce using rule 93 (primary_expression -> FALSE .)
    DIVIDE          reduce using rule 93 (primary_expression -> FALSE .)
    DIV             reduce using rule 93 (primary_expression -> FALSE .)
    MOD             reduce using rule 93 (primary_expression -> FALSE .)
    EQ              reduce using rule 93 (primary_expression -> FALSE .)
    NE              reduce using rule 93 (primary_expression -> FALSE .)
    LT              reduce using rule 93 (primary_expression -> FALSE .)
    LE              reduce using rule 93 (primary_expression -> FALSE .)
    GT              reduce using rule 93 (primary_expression -> FALSE .)
    GE              reduce using rule 93 (primary_expression -> FALSE .)
    PLUS            reduce using rule 93 (primary_expression -> FALSE .)
    MINUS           reduce using rule 93 (primary_expression -> FALSE .)
    AND             reduce using rule 93 (primary_expression -> FALSE .)
    OR              reduce using rule 93 (primary_expression -> FALSE .)
    THEN            reduce using rule 93 (primary_expression -> FALSE .)
    DO              reduce using rule 93 (primary_expression -> FALSE .)
    END             reduce using rule 93 (primary_expression -> FALSE .)
    SEMI            reduce using rule 93 (primary_expression -> FALSE .)
    UNTIL           reduce using rule 93 (primary_expression -> FALSE .)
    ELSE            reduce using rule 93 (primary_expression -> FALSE .)
    RPAREN          reduce using rule 93 (primary_expression -> FALSE .)
    COMMA           reduce using rule 93 (primary_expression -> FALSE .)
    RBRACK          reduce using rule 93 (primary_expression -> FALSE .)
    TO              reduce using rule 93 (primary_expression -> FALSE .)
    DOWNTO          reduce using rule 93 (primary_expression -> FALSE .)


state 68

    (94) primary_expression -> LPAREN . expression RPAREN
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 114
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 69

    (95) primary_expression -> function_call .

    TIMES           reduce using rule 95 (primary_expression -> function_call .)
    DIVIDE          reduce using rule 95 (primary_expression -> function_call .)
    DIV             reduce using rule 95 (primary_expression -> function_call .)
    MOD             reduce using rule 95 (primary_expression -> function_call .)
    EQ              reduce using rule 95 (primary_expression -> function_call .)
    NE              reduce using rule 95 (primary_expression -> function_call .)
    LT              reduce using rule 95 (primary_expression -> function_call .)
    LE              reduce using rule 95 (primary_expression -> function_call .)
    GT              reduce using rule 95 (primary_expression -> function_call .)
    GE              reduce using rule 95 (primary_expression -> function_call .)
    PLUS            reduce using rule 95 (primary_expression -> function_call .)
    MINUS           reduce using rule 95 (primary_expression -> function_call .)
    AND             reduce using rule 95 (primary_expression -> function_call .)
    OR              reduce using rule 95 (primary_expression -> function_call .)
    THEN            reduce using rule 95 (primary_expression -> function_call .)
    DO              reduce using rule 95 (primary_expression -> function_call .)
    END             reduce using rule 95 (primary_expression -> function_call .)
    SEMI            reduce using rule 95 (primary_expression -> function_call .)
    UNTIL           reduce using rule 95 (primary_expression -> function_call .)
    ELSE            reduce using rule 95 (primary_expression -> function_call .)
    RPAREN          reduce using rule 95 (primary_expression -> function_call .)
    COMMA           reduce using rule 95 (primary_expression -> function_call .)
    RBRACK          reduce using rule 95 (primary_expression -> function_call .)
    TO              reduce using rule 95 (primary_expression -> function_call .)
    DOWNTO          reduce using rule 95 (primary_expression -> function_call .)


state 70

    (96) primary_expression -> CHAR_LITERAL .

    TIMES           reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    DIVIDE          reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    DIV             reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    MOD             reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    EQ              reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    NE              reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    LT              reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    LE              reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    GT              reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    GE              reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    PLUS            reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    MINUS           reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    AND             reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    OR              reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    THEN            reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    DO              reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    END             reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    SEMI            reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    UNTIL           reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    ELSE            reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    RPAREN          reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    COMMA           reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    RBRACK          reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    TO              reduce using rule 96 (primary_expression -> CHAR_LITERAL .)
    DOWNTO          reduce using rule 96 (primary_expression -> CHAR_LITERAL .)


state 71

    (87) sign -> PLUS .

    NUMBER          reduce using rule 87 (sign -> PLUS .)
    STRING_LITERAL  reduce using rule 87 (sign -> PLUS .)
    TRUE            reduce using rule 87 (sign -> PLUS .)
    FALSE           reduce using rule 87 (sign -> PLUS .)
    LPAREN          reduce using rule 87 (sign -> PLUS .)
    CHAR_LITERAL    reduce using rule 87 (sign -> PLUS .)
    PLUS            reduce using rule 87 (sign -> PLUS .)
    MINUS           reduce using rule 87 (sign -> PLUS .)
    ID              reduce using rule 87 (sign -> PLUS .)


state 72

    (88) sign -> MINUS .

    NUMBER          reduce using rule 88 (sign -> MINUS .)
    STRING_LITERAL  reduce using rule 88 (sign -> MINUS .)
    TRUE            reduce using rule 88 (sign -> MINUS .)
    FALSE           reduce using rule 88 (sign -> MINUS .)
    LPAREN          reduce using rule 88 (sign -> MINUS .)
    CHAR_LITERAL    reduce using rule 88 (sign -> MINUS .)
    PLUS            reduce using rule 88 (sign -> MINUS .)
    MINUS           reduce using rule 88 (sign -> MINUS .)
    ID              reduce using rule 88 (sign -> MINUS .)


state 73

    (40) variable -> ID .
    (41) variable -> ID . LBRACK expression RBRACK
    (48) function_call -> ID . LPAREN argument_list RPAREN

    TIMES           reduce using rule 40 (variable -> ID .)
    DIVIDE          reduce using rule 40 (variable -> ID .)
    DIV             reduce using rule 40 (variable -> ID .)
    MOD             reduce using rule 40 (variable -> ID .)
    EQ              reduce using rule 40 (variable -> ID .)
    NE              reduce using rule 40 (variable -> ID .)
    LT              reduce using rule 40 (variable -> ID .)
    LE              reduce using rule 40 (variable -> ID .)
    GT              reduce using rule 40 (variable -> ID .)
    GE              reduce using rule 40 (variable -> ID .)
    PLUS            reduce using rule 40 (variable -> ID .)
    MINUS           reduce using rule 40 (variable -> ID .)
    AND             reduce using rule 40 (variable -> ID .)
    OR              reduce using rule 40 (variable -> ID .)
    THEN            reduce using rule 40 (variable -> ID .)
    DO              reduce using rule 40 (variable -> ID .)
    END             reduce using rule 40 (variable -> ID .)
    SEMI            reduce using rule 40 (variable -> ID .)
    UNTIL           reduce using rule 40 (variable -> ID .)
    ELSE            reduce using rule 40 (variable -> ID .)
    RPAREN          reduce using rule 40 (variable -> ID .)
    COMMA           reduce using rule 40 (variable -> ID .)
    RBRACK          reduce using rule 40 (variable -> ID .)
    TO              reduce using rule 40 (variable -> ID .)
    DOWNTO          reduce using rule 40 (variable -> ID .)
    LBRACK          shift and go to state 79
    LPAREN          shift and go to state 78


state 74

    (44) while_statement -> WHILE expression . DO statement

    DO              shift and go to state 115


state 75

    (45) for_statement -> FOR variable . ASSIGN expression TO expression DO statement
    (46) for_statement -> FOR variable . ASSIGN expression DOWNTO expression DO statement

    ASSIGN          shift and go to state 116


state 76

    (40) variable -> ID .
    (41) variable -> ID . LBRACK expression RBRACK

    ASSIGN          reduce using rule 40 (variable -> ID .)
    RPAREN          reduce using rule 40 (variable -> ID .)
    COMMA           reduce using rule 40 (variable -> ID .)
    LBRACK          shift and go to state 79


state 77

    (47) repeat_statement -> REPEAT statement_list . UNTIL expression
    (27) statement_list -> statement_list . SEMI statement

    UNTIL           shift and go to state 117
    SEMI            shift and go to state 52


state 78

    (48) function_call -> ID LPAREN . argument_list RPAREN
    (49) argument_list -> .
    (50) argument_list -> . expression
    (51) argument_list -> . argument_list COMMA expression
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    RPAREN          reduce using rule 49 (argument_list -> .)
    COMMA           reduce using rule 49 (argument_list -> .)
    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    argument_list                  shift and go to state 118
    expression                     shift and go to state 119
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 79

    (41) variable -> ID LBRACK . expression RBRACK
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 120
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 80

    (52) write_statement -> write_func LPAREN . output_list RPAREN
    (58) output_list -> . expression
    (59) output_list -> . output_list COMMA expression
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    output_list                    shift and go to state 121
    expression                     shift and go to state 122
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 81

    (55) read_statement -> read_func LPAREN . variable_list RPAREN
    (60) variable_list -> . variable
    (61) variable_list -> . variable_list COMMA variable
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK

    ID              shift and go to state 76

    variable_list                  shift and go to state 123
    variable                       shift and go to state 124

state 82

    (8) declaration -> id_list COLON type . SEMI

    SEMI            shift and go to state 125


state 83

    (11) type -> INTEGER .

    SEMI            reduce using rule 11 (type -> INTEGER .)
    RPAREN          reduce using rule 11 (type -> INTEGER .)


state 84

    (12) type -> BOOLEAN .

    SEMI            reduce using rule 12 (type -> BOOLEAN .)
    RPAREN          reduce using rule 12 (type -> BOOLEAN .)


state 85

    (13) type -> STRING .

    SEMI            reduce using rule 13 (type -> STRING .)
    RPAREN          reduce using rule 13 (type -> STRING .)


state 86

    (14) type -> REAL .

    SEMI            reduce using rule 14 (type -> REAL .)
    RPAREN          reduce using rule 14 (type -> REAL .)


state 87

    (15) type -> ARRAY . LBRACK NUMBER DOTDOT NUMBER RBRACK OF type

    LBRACK          shift and go to state 126


state 88

    (10) id_list -> id_list COMMA ID .

    COLON           reduce using rule 10 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 10 (id_list -> id_list COMMA ID .)


state 89

    (18) func_declaration -> FUNCTION ID LPAREN . parameters RPAREN COLON type SEMI block SEMI
    (20) parameters -> .
    (21) parameters -> . parameter_list
    (22) parameter_list -> . parameter
    (23) parameter_list -> . parameter_list SEMI parameter
    (24) parameter -> . id_list COLON type
    (9) id_list -> . ID
    (10) id_list -> . id_list COMMA ID

    RPAREN          reduce using rule 20 (parameters -> .)
    ID              shift and go to state 15

    parameters                     shift and go to state 127
    parameter_list                 shift and go to state 128
    parameter                      shift and go to state 129
    id_list                        shift and go to state 130

state 90

    (19) func_declaration -> PROCEDURE ID LPAREN . parameters RPAREN SEMI block SEMI
    (20) parameters -> .
    (21) parameters -> . parameter_list
    (22) parameter_list -> . parameter
    (23) parameter_list -> . parameter_list SEMI parameter
    (24) parameter -> . id_list COLON type
    (9) id_list -> . ID
    (10) id_list -> . id_list COMMA ID

    RPAREN          reduce using rule 20 (parameters -> .)
    ID              shift and go to state 15

    parameters                     shift and go to state 131
    parameter_list                 shift and go to state 128
    parameter                      shift and go to state 129
    id_list                        shift and go to state 130

state 91

    (38) compound_section_block -> BEGIN statement_list END .

    END             reduce using rule 38 (compound_section_block -> BEGIN statement_list END .)
    SEMI            reduce using rule 38 (compound_section_block -> BEGIN statement_list END .)
    UNTIL           reduce using rule 38 (compound_section_block -> BEGIN statement_list END .)
    ELSE            reduce using rule 38 (compound_section_block -> BEGIN statement_list END .)


state 92

    (27) statement_list -> statement_list SEMI statement .

    END             reduce using rule 27 (statement_list -> statement_list SEMI statement .)
    SEMI            reduce using rule 27 (statement_list -> statement_list SEMI statement .)
    UNTIL           reduce using rule 27 (statement_list -> statement_list SEMI statement .)


state 93

    (39) assign_statement -> variable ASSIGN expression .

    END             reduce using rule 39 (assign_statement -> variable ASSIGN expression .)
    SEMI            reduce using rule 39 (assign_statement -> variable ASSIGN expression .)
    UNTIL           reduce using rule 39 (assign_statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 39 (assign_statement -> variable ASSIGN expression .)


state 94

    (42) if_statement -> IF expression THEN . statement
    (43) if_statement -> IF expression THEN . statement ELSE statement
    (28) statement -> . assign_statement
    (29) statement -> . if_statement
    (30) statement -> . while_statement
    (31) statement -> . for_statement
    (32) statement -> . repeat_statement
    (33) statement -> . compound_section_block
    (34) statement -> . function_call
    (35) statement -> . write_statement
    (36) statement -> . read_statement
    (37) statement -> .
    (39) assign_statement -> . variable ASSIGN expression
    (42) if_statement -> . IF expression THEN statement
    (43) if_statement -> . IF expression THEN statement ELSE statement
    (44) while_statement -> . WHILE expression DO statement
    (45) for_statement -> . FOR variable ASSIGN expression TO expression DO statement
    (46) for_statement -> . FOR variable ASSIGN expression DOWNTO expression DO statement
    (47) repeat_statement -> . REPEAT statement_list UNTIL expression
    (38) compound_section_block -> . BEGIN statement_list END
    (48) function_call -> . ID LPAREN argument_list RPAREN
    (52) write_statement -> . write_func LPAREN output_list RPAREN
    (55) read_statement -> . read_func LPAREN variable_list RPAREN
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (53) write_func -> . WRITE
    (54) write_func -> . WRITELN
    (56) read_func -> . READ
    (57) read_func -> . READLN

    ELSE            reduce using rule 37 (statement -> .)
    END             reduce using rule 37 (statement -> .)
    SEMI            reduce using rule 37 (statement -> .)
    UNTIL           reduce using rule 37 (statement -> .)
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    BEGIN           shift and go to state 20
    ID              shift and go to state 37
    WRITE           shift and go to state 40
    WRITELN         shift and go to state 41
    READ            shift and go to state 42
    READLN          shift and go to state 43

    statement                      shift and go to state 132
    assign_statement               shift and go to state 23
    if_statement                   shift and go to state 24
    while_statement                shift and go to state 25
    for_statement                  shift and go to state 26
    repeat_statement               shift and go to state 27
    compound_section_block         shift and go to state 28
    function_call                  shift and go to state 29
    write_statement                shift and go to state 30
    read_statement                 shift and go to state 31
    variable                       shift and go to state 32
    write_func                     shift and go to state 38
    read_func                      shift and go to state 39

state 95

    (64) logical_expression -> logical_expression AND . relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    relational_expression          shift and go to state 133
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 96

    (65) logical_expression -> logical_expression OR . relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    relational_expression          shift and go to state 134
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 97

    (66) logical_expression -> NOT relational_expression .

    AND             reduce using rule 66 (logical_expression -> NOT relational_expression .)
    OR              reduce using rule 66 (logical_expression -> NOT relational_expression .)
    THEN            reduce using rule 66 (logical_expression -> NOT relational_expression .)
    DO              reduce using rule 66 (logical_expression -> NOT relational_expression .)
    END             reduce using rule 66 (logical_expression -> NOT relational_expression .)
    SEMI            reduce using rule 66 (logical_expression -> NOT relational_expression .)
    UNTIL           reduce using rule 66 (logical_expression -> NOT relational_expression .)
    ELSE            reduce using rule 66 (logical_expression -> NOT relational_expression .)
    RPAREN          reduce using rule 66 (logical_expression -> NOT relational_expression .)
    COMMA           reduce using rule 66 (logical_expression -> NOT relational_expression .)
    RBRACK          reduce using rule 66 (logical_expression -> NOT relational_expression .)
    TO              reduce using rule 66 (logical_expression -> NOT relational_expression .)
    DOWNTO          reduce using rule 66 (logical_expression -> NOT relational_expression .)


state 98

    (68) relational_expression -> addition_expression relop . addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    addition_expression            shift and go to state 135
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 99

    (76) addition_expression -> addition_expression addop . mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    mult_expression                shift and go to state 136
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 100

    (69) relop -> EQ .

    NUMBER          reduce using rule 69 (relop -> EQ .)
    STRING_LITERAL  reduce using rule 69 (relop -> EQ .)
    TRUE            reduce using rule 69 (relop -> EQ .)
    FALSE           reduce using rule 69 (relop -> EQ .)
    LPAREN          reduce using rule 69 (relop -> EQ .)
    CHAR_LITERAL    reduce using rule 69 (relop -> EQ .)
    PLUS            reduce using rule 69 (relop -> EQ .)
    MINUS           reduce using rule 69 (relop -> EQ .)
    ID              reduce using rule 69 (relop -> EQ .)


state 101

    (70) relop -> NE .

    NUMBER          reduce using rule 70 (relop -> NE .)
    STRING_LITERAL  reduce using rule 70 (relop -> NE .)
    TRUE            reduce using rule 70 (relop -> NE .)
    FALSE           reduce using rule 70 (relop -> NE .)
    LPAREN          reduce using rule 70 (relop -> NE .)
    CHAR_LITERAL    reduce using rule 70 (relop -> NE .)
    PLUS            reduce using rule 70 (relop -> NE .)
    MINUS           reduce using rule 70 (relop -> NE .)
    ID              reduce using rule 70 (relop -> NE .)


state 102

    (71) relop -> LT .

    NUMBER          reduce using rule 71 (relop -> LT .)
    STRING_LITERAL  reduce using rule 71 (relop -> LT .)
    TRUE            reduce using rule 71 (relop -> LT .)
    FALSE           reduce using rule 71 (relop -> LT .)
    LPAREN          reduce using rule 71 (relop -> LT .)
    CHAR_LITERAL    reduce using rule 71 (relop -> LT .)
    PLUS            reduce using rule 71 (relop -> LT .)
    MINUS           reduce using rule 71 (relop -> LT .)
    ID              reduce using rule 71 (relop -> LT .)


state 103

    (72) relop -> LE .

    NUMBER          reduce using rule 72 (relop -> LE .)
    STRING_LITERAL  reduce using rule 72 (relop -> LE .)
    TRUE            reduce using rule 72 (relop -> LE .)
    FALSE           reduce using rule 72 (relop -> LE .)
    LPAREN          reduce using rule 72 (relop -> LE .)
    CHAR_LITERAL    reduce using rule 72 (relop -> LE .)
    PLUS            reduce using rule 72 (relop -> LE .)
    MINUS           reduce using rule 72 (relop -> LE .)
    ID              reduce using rule 72 (relop -> LE .)


state 104

    (73) relop -> GT .

    NUMBER          reduce using rule 73 (relop -> GT .)
    STRING_LITERAL  reduce using rule 73 (relop -> GT .)
    TRUE            reduce using rule 73 (relop -> GT .)
    FALSE           reduce using rule 73 (relop -> GT .)
    LPAREN          reduce using rule 73 (relop -> GT .)
    CHAR_LITERAL    reduce using rule 73 (relop -> GT .)
    PLUS            reduce using rule 73 (relop -> GT .)
    MINUS           reduce using rule 73 (relop -> GT .)
    ID              reduce using rule 73 (relop -> GT .)


state 105

    (74) relop -> GE .

    NUMBER          reduce using rule 74 (relop -> GE .)
    STRING_LITERAL  reduce using rule 74 (relop -> GE .)
    TRUE            reduce using rule 74 (relop -> GE .)
    FALSE           reduce using rule 74 (relop -> GE .)
    LPAREN          reduce using rule 74 (relop -> GE .)
    CHAR_LITERAL    reduce using rule 74 (relop -> GE .)
    PLUS            reduce using rule 74 (relop -> GE .)
    MINUS           reduce using rule 74 (relop -> GE .)
    ID              reduce using rule 74 (relop -> GE .)


state 106

    (77) addop -> PLUS .

    NUMBER          reduce using rule 77 (addop -> PLUS .)
    STRING_LITERAL  reduce using rule 77 (addop -> PLUS .)
    TRUE            reduce using rule 77 (addop -> PLUS .)
    FALSE           reduce using rule 77 (addop -> PLUS .)
    LPAREN          reduce using rule 77 (addop -> PLUS .)
    CHAR_LITERAL    reduce using rule 77 (addop -> PLUS .)
    PLUS            reduce using rule 77 (addop -> PLUS .)
    MINUS           reduce using rule 77 (addop -> PLUS .)
    ID              reduce using rule 77 (addop -> PLUS .)


state 107

    (78) addop -> MINUS .

    NUMBER          reduce using rule 78 (addop -> MINUS .)
    STRING_LITERAL  reduce using rule 78 (addop -> MINUS .)
    TRUE            reduce using rule 78 (addop -> MINUS .)
    FALSE           reduce using rule 78 (addop -> MINUS .)
    LPAREN          reduce using rule 78 (addop -> MINUS .)
    CHAR_LITERAL    reduce using rule 78 (addop -> MINUS .)
    PLUS            reduce using rule 78 (addop -> MINUS .)
    MINUS           reduce using rule 78 (addop -> MINUS .)
    ID              reduce using rule 78 (addop -> MINUS .)


state 108

    (80) mult_expression -> mult_expression mulop . unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    unary_expression               shift and go to state 137
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 109

    (81) mulop -> TIMES .

    NUMBER          reduce using rule 81 (mulop -> TIMES .)
    STRING_LITERAL  reduce using rule 81 (mulop -> TIMES .)
    TRUE            reduce using rule 81 (mulop -> TIMES .)
    FALSE           reduce using rule 81 (mulop -> TIMES .)
    LPAREN          reduce using rule 81 (mulop -> TIMES .)
    CHAR_LITERAL    reduce using rule 81 (mulop -> TIMES .)
    PLUS            reduce using rule 81 (mulop -> TIMES .)
    MINUS           reduce using rule 81 (mulop -> TIMES .)
    ID              reduce using rule 81 (mulop -> TIMES .)


state 110

    (82) mulop -> DIVIDE .

    NUMBER          reduce using rule 82 (mulop -> DIVIDE .)
    STRING_LITERAL  reduce using rule 82 (mulop -> DIVIDE .)
    TRUE            reduce using rule 82 (mulop -> DIVIDE .)
    FALSE           reduce using rule 82 (mulop -> DIVIDE .)
    LPAREN          reduce using rule 82 (mulop -> DIVIDE .)
    CHAR_LITERAL    reduce using rule 82 (mulop -> DIVIDE .)
    PLUS            reduce using rule 82 (mulop -> DIVIDE .)
    MINUS           reduce using rule 82 (mulop -> DIVIDE .)
    ID              reduce using rule 82 (mulop -> DIVIDE .)


state 111

    (83) mulop -> DIV .

    NUMBER          reduce using rule 83 (mulop -> DIV .)
    STRING_LITERAL  reduce using rule 83 (mulop -> DIV .)
    TRUE            reduce using rule 83 (mulop -> DIV .)
    FALSE           reduce using rule 83 (mulop -> DIV .)
    LPAREN          reduce using rule 83 (mulop -> DIV .)
    CHAR_LITERAL    reduce using rule 83 (mulop -> DIV .)
    PLUS            reduce using rule 83 (mulop -> DIV .)
    MINUS           reduce using rule 83 (mulop -> DIV .)
    ID              reduce using rule 83 (mulop -> DIV .)


state 112

    (84) mulop -> MOD .

    NUMBER          reduce using rule 84 (mulop -> MOD .)
    STRING_LITERAL  reduce using rule 84 (mulop -> MOD .)
    TRUE            reduce using rule 84 (mulop -> MOD .)
    FALSE           reduce using rule 84 (mulop -> MOD .)
    LPAREN          reduce using rule 84 (mulop -> MOD .)
    CHAR_LITERAL    reduce using rule 84 (mulop -> MOD .)
    PLUS            reduce using rule 84 (mulop -> MOD .)
    MINUS           reduce using rule 84 (mulop -> MOD .)
    ID              reduce using rule 84 (mulop -> MOD .)


state 113

    (86) unary_expression -> sign unary_expression .

    TIMES           reduce using rule 86 (unary_expression -> sign unary_expression .)
    DIVIDE          reduce using rule 86 (unary_expression -> sign unary_expression .)
    DIV             reduce using rule 86 (unary_expression -> sign unary_expression .)
    MOD             reduce using rule 86 (unary_expression -> sign unary_expression .)
    EQ              reduce using rule 86 (unary_expression -> sign unary_expression .)
    NE              reduce using rule 86 (unary_expression -> sign unary_expression .)
    LT              reduce using rule 86 (unary_expression -> sign unary_expression .)
    LE              reduce using rule 86 (unary_expression -> sign unary_expression .)
    GT              reduce using rule 86 (unary_expression -> sign unary_expression .)
    GE              reduce using rule 86 (unary_expression -> sign unary_expression .)
    PLUS            reduce using rule 86 (unary_expression -> sign unary_expression .)
    MINUS           reduce using rule 86 (unary_expression -> sign unary_expression .)
    AND             reduce using rule 86 (unary_expression -> sign unary_expression .)
    OR              reduce using rule 86 (unary_expression -> sign unary_expression .)
    THEN            reduce using rule 86 (unary_expression -> sign unary_expression .)
    DO              reduce using rule 86 (unary_expression -> sign unary_expression .)
    END             reduce using rule 86 (unary_expression -> sign unary_expression .)
    SEMI            reduce using rule 86 (unary_expression -> sign unary_expression .)
    UNTIL           reduce using rule 86 (unary_expression -> sign unary_expression .)
    ELSE            reduce using rule 86 (unary_expression -> sign unary_expression .)
    RPAREN          reduce using rule 86 (unary_expression -> sign unary_expression .)
    COMMA           reduce using rule 86 (unary_expression -> sign unary_expression .)
    RBRACK          reduce using rule 86 (unary_expression -> sign unary_expression .)
    TO              reduce using rule 86 (unary_expression -> sign unary_expression .)
    DOWNTO          reduce using rule 86 (unary_expression -> sign unary_expression .)


state 114

    (94) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 138


state 115

    (44) while_statement -> WHILE expression DO . statement
    (28) statement -> . assign_statement
    (29) statement -> . if_statement
    (30) statement -> . while_statement
    (31) statement -> . for_statement
    (32) statement -> . repeat_statement
    (33) statement -> . compound_section_block
    (34) statement -> . function_call
    (35) statement -> . write_statement
    (36) statement -> . read_statement
    (37) statement -> .
    (39) assign_statement -> . variable ASSIGN expression
    (42) if_statement -> . IF expression THEN statement
    (43) if_statement -> . IF expression THEN statement ELSE statement
    (44) while_statement -> . WHILE expression DO statement
    (45) for_statement -> . FOR variable ASSIGN expression TO expression DO statement
    (46) for_statement -> . FOR variable ASSIGN expression DOWNTO expression DO statement
    (47) repeat_statement -> . REPEAT statement_list UNTIL expression
    (38) compound_section_block -> . BEGIN statement_list END
    (48) function_call -> . ID LPAREN argument_list RPAREN
    (52) write_statement -> . write_func LPAREN output_list RPAREN
    (55) read_statement -> . read_func LPAREN variable_list RPAREN
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (53) write_func -> . WRITE
    (54) write_func -> . WRITELN
    (56) read_func -> . READ
    (57) read_func -> . READLN

    ELSE            reduce using rule 37 (statement -> .)
    END             reduce using rule 37 (statement -> .)
    SEMI            reduce using rule 37 (statement -> .)
    UNTIL           reduce using rule 37 (statement -> .)
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    BEGIN           shift and go to state 20
    ID              shift and go to state 37
    WRITE           shift and go to state 40
    WRITELN         shift and go to state 41
    READ            shift and go to state 42
    READLN          shift and go to state 43

    statement                      shift and go to state 139
    assign_statement               shift and go to state 23
    if_statement                   shift and go to state 24
    while_statement                shift and go to state 25
    for_statement                  shift and go to state 26
    repeat_statement               shift and go to state 27
    compound_section_block         shift and go to state 28
    function_call                  shift and go to state 29
    write_statement                shift and go to state 30
    read_statement                 shift and go to state 31
    variable                       shift and go to state 32
    write_func                     shift and go to state 38
    read_func                      shift and go to state 39

state 116

    (45) for_statement -> FOR variable ASSIGN . expression TO expression DO statement
    (46) for_statement -> FOR variable ASSIGN . expression DOWNTO expression DO statement
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    variable                       shift and go to state 63
    expression                     shift and go to state 140
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    function_call                  shift and go to state 69

state 117

    (47) repeat_statement -> REPEAT statement_list UNTIL . expression
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 141
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 118

    (48) function_call -> ID LPAREN argument_list . RPAREN
    (51) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 142
    COMMA           shift and go to state 143


state 119

    (50) argument_list -> expression .

    RPAREN          reduce using rule 50 (argument_list -> expression .)
    COMMA           reduce using rule 50 (argument_list -> expression .)


state 120

    (41) variable -> ID LBRACK expression . RBRACK

    RBRACK          shift and go to state 144


state 121

    (52) write_statement -> write_func LPAREN output_list . RPAREN
    (59) output_list -> output_list . COMMA expression

    RPAREN          shift and go to state 145
    COMMA           shift and go to state 146


state 122

    (58) output_list -> expression .

    RPAREN          reduce using rule 58 (output_list -> expression .)
    COMMA           reduce using rule 58 (output_list -> expression .)


state 123

    (55) read_statement -> read_func LPAREN variable_list . RPAREN
    (61) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 147
    COMMA           shift and go to state 148


state 124

    (60) variable_list -> variable .

    RPAREN          reduce using rule 60 (variable_list -> variable .)
    COMMA           reduce using rule 60 (variable_list -> variable .)


state 125

    (8) declaration -> id_list COLON type SEMI .

    ID              reduce using rule 8 (declaration -> id_list COLON type SEMI .)
    BEGIN           reduce using rule 8 (declaration -> id_list COLON type SEMI .)
    VAR             reduce using rule 8 (declaration -> id_list COLON type SEMI .)
    FUNCTION        reduce using rule 8 (declaration -> id_list COLON type SEMI .)
    PROCEDURE       reduce using rule 8 (declaration -> id_list COLON type SEMI .)


state 126

    (15) type -> ARRAY LBRACK . NUMBER DOTDOT NUMBER RBRACK OF type

    NUMBER          shift and go to state 149


state 127

    (18) func_declaration -> FUNCTION ID LPAREN parameters . RPAREN COLON type SEMI block SEMI

    RPAREN          shift and go to state 150


state 128

    (21) parameters -> parameter_list .
    (23) parameter_list -> parameter_list . SEMI parameter

    RPAREN          reduce using rule 21 (parameters -> parameter_list .)
    SEMI            shift and go to state 151


state 129

    (22) parameter_list -> parameter .

    SEMI            reduce using rule 22 (parameter_list -> parameter .)
    RPAREN          reduce using rule 22 (parameter_list -> parameter .)


state 130

    (24) parameter -> id_list . COLON type
    (10) id_list -> id_list . COMMA ID

    COLON           shift and go to state 152
    COMMA           shift and go to state 46


state 131

    (19) func_declaration -> PROCEDURE ID LPAREN parameters . RPAREN SEMI block SEMI

    RPAREN          shift and go to state 153


state 132

    (42) if_statement -> IF expression THEN statement .
    (43) if_statement -> IF expression THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    END             reduce using rule 42 (if_statement -> IF expression THEN statement .)
    SEMI            reduce using rule 42 (if_statement -> IF expression THEN statement .)
    UNTIL           reduce using rule 42 (if_statement -> IF expression THEN statement .)
    ELSE            shift and go to state 154

  ! ELSE            [ reduce using rule 42 (if_statement -> IF expression THEN statement .) ]


state 133

    (64) logical_expression -> logical_expression AND relational_expression .

    AND             reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)
    OR              reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)
    THEN            reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)
    DO              reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)
    END             reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)
    SEMI            reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)
    UNTIL           reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)
    ELSE            reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)
    RPAREN          reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)
    COMMA           reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)
    RBRACK          reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)
    TO              reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)
    DOWNTO          reduce using rule 64 (logical_expression -> logical_expression AND relational_expression .)


state 134

    (65) logical_expression -> logical_expression OR relational_expression .

    AND             reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)
    OR              reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)
    THEN            reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)
    DO              reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)
    END             reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)
    SEMI            reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)
    UNTIL           reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)
    ELSE            reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)
    RPAREN          reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)
    COMMA           reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)
    RBRACK          reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)
    TO              reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)
    DOWNTO          reduce using rule 65 (logical_expression -> logical_expression OR relational_expression .)


state 135

    (68) relational_expression -> addition_expression relop addition_expression .
    (76) addition_expression -> addition_expression . addop mult_expression
    (77) addop -> . PLUS
    (78) addop -> . MINUS

    AND             reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    OR              reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    THEN            reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    DO              reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    END             reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    SEMI            reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    UNTIL           reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    ELSE            reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    RPAREN          reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    COMMA           reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    RBRACK          reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    TO              reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    DOWNTO          reduce using rule 68 (relational_expression -> addition_expression relop addition_expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

    addop                          shift and go to state 99

state 136

    (76) addition_expression -> addition_expression addop mult_expression .
    (80) mult_expression -> mult_expression . mulop unary_expression
    (81) mulop -> . TIMES
    (82) mulop -> . DIVIDE
    (83) mulop -> . DIV
    (84) mulop -> . MOD

    EQ              reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    NE              reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    LT              reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    LE              reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    GT              reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    GE              reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    PLUS            reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    MINUS           reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    AND             reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    OR              reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    THEN            reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    DO              reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    END             reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    SEMI            reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    UNTIL           reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    ELSE            reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    RPAREN          reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    COMMA           reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    RBRACK          reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    TO              reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    DOWNTO          reduce using rule 76 (addition_expression -> addition_expression addop mult_expression .)
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 110
    DIV             shift and go to state 111
    MOD             shift and go to state 112

    mulop                          shift and go to state 108

state 137

    (80) mult_expression -> mult_expression mulop unary_expression .

    TIMES           reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    DIVIDE          reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    DIV             reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    MOD             reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    EQ              reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    NE              reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    LT              reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    LE              reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    GT              reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    GE              reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    PLUS            reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    MINUS           reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    AND             reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    OR              reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    THEN            reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    DO              reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    END             reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    SEMI            reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    UNTIL           reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    ELSE            reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    RPAREN          reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    COMMA           reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    RBRACK          reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    TO              reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)
    DOWNTO          reduce using rule 80 (mult_expression -> mult_expression mulop unary_expression .)


state 138

    (94) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    END             reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 94 (primary_expression -> LPAREN expression RPAREN .)


state 139

    (44) while_statement -> WHILE expression DO statement .

    END             reduce using rule 44 (while_statement -> WHILE expression DO statement .)
    SEMI            reduce using rule 44 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 44 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 44 (while_statement -> WHILE expression DO statement .)


state 140

    (45) for_statement -> FOR variable ASSIGN expression . TO expression DO statement
    (46) for_statement -> FOR variable ASSIGN expression . DOWNTO expression DO statement

    TO              shift and go to state 155
    DOWNTO          shift and go to state 156


state 141

    (47) repeat_statement -> REPEAT statement_list UNTIL expression .

    END             reduce using rule 47 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    SEMI            reduce using rule 47 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    UNTIL           reduce using rule 47 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    ELSE            reduce using rule 47 (repeat_statement -> REPEAT statement_list UNTIL expression .)


state 142

    (48) function_call -> ID LPAREN argument_list RPAREN .

    END             reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    SEMI            reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    DIV             reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    MOD             reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    EQ              reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    NE              reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    LT              reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    LE              reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    GT              reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    GE              reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    AND             reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    OR              reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    THEN            reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    DO              reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    UNTIL           reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    ELSE            reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    RBRACK          reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    TO              reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)
    DOWNTO          reduce using rule 48 (function_call -> ID LPAREN argument_list RPAREN .)


state 143

    (51) argument_list -> argument_list COMMA . expression
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 157
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 144

    (41) variable -> ID LBRACK expression RBRACK .

    ASSIGN          reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    TIMES           reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    DIV             reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    MOD             reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    EQ              reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    NE              reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    LT              reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    LE              reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    GT              reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    GE              reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    PLUS            reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    MINUS           reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    AND             reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    OR              reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    THEN            reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    DO              reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    END             reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    SEMI            reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    UNTIL           reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    ELSE            reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    RPAREN          reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    COMMA           reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    RBRACK          reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    TO              reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)
    DOWNTO          reduce using rule 41 (variable -> ID LBRACK expression RBRACK .)


state 145

    (52) write_statement -> write_func LPAREN output_list RPAREN .

    END             reduce using rule 52 (write_statement -> write_func LPAREN output_list RPAREN .)
    SEMI            reduce using rule 52 (write_statement -> write_func LPAREN output_list RPAREN .)
    UNTIL           reduce using rule 52 (write_statement -> write_func LPAREN output_list RPAREN .)
    ELSE            reduce using rule 52 (write_statement -> write_func LPAREN output_list RPAREN .)


state 146

    (59) output_list -> output_list COMMA . expression
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    expression                     shift and go to state 158
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    variable                       shift and go to state 63
    function_call                  shift and go to state 69

state 147

    (55) read_statement -> read_func LPAREN variable_list RPAREN .

    END             reduce using rule 55 (read_statement -> read_func LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 55 (read_statement -> read_func LPAREN variable_list RPAREN .)
    UNTIL           reduce using rule 55 (read_statement -> read_func LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 55 (read_statement -> read_func LPAREN variable_list RPAREN .)


state 148

    (61) variable_list -> variable_list COMMA . variable
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK

    ID              shift and go to state 76

    variable                       shift and go to state 159

state 149

    (15) type -> ARRAY LBRACK NUMBER . DOTDOT NUMBER RBRACK OF type

    DOTDOT          shift and go to state 160


state 150

    (18) func_declaration -> FUNCTION ID LPAREN parameters RPAREN . COLON type SEMI block SEMI

    COLON           shift and go to state 161


state 151

    (23) parameter_list -> parameter_list SEMI . parameter
    (24) parameter -> . id_list COLON type
    (9) id_list -> . ID
    (10) id_list -> . id_list COMMA ID

    ID              shift and go to state 15

    parameter                      shift and go to state 162
    id_list                        shift and go to state 130

state 152

    (24) parameter -> id_list COLON . type
    (11) type -> . INTEGER
    (12) type -> . BOOLEAN
    (13) type -> . STRING
    (14) type -> . REAL
    (15) type -> . ARRAY LBRACK NUMBER DOTDOT NUMBER RBRACK OF type

    INTEGER         shift and go to state 83
    BOOLEAN         shift and go to state 84
    STRING          shift and go to state 85
    REAL            shift and go to state 86
    ARRAY           shift and go to state 87

    type                           shift and go to state 163

state 153

    (19) func_declaration -> PROCEDURE ID LPAREN parameters RPAREN . SEMI block SEMI

    SEMI            shift and go to state 164


state 154

    (43) if_statement -> IF expression THEN statement ELSE . statement
    (28) statement -> . assign_statement
    (29) statement -> . if_statement
    (30) statement -> . while_statement
    (31) statement -> . for_statement
    (32) statement -> . repeat_statement
    (33) statement -> . compound_section_block
    (34) statement -> . function_call
    (35) statement -> . write_statement
    (36) statement -> . read_statement
    (37) statement -> .
    (39) assign_statement -> . variable ASSIGN expression
    (42) if_statement -> . IF expression THEN statement
    (43) if_statement -> . IF expression THEN statement ELSE statement
    (44) while_statement -> . WHILE expression DO statement
    (45) for_statement -> . FOR variable ASSIGN expression TO expression DO statement
    (46) for_statement -> . FOR variable ASSIGN expression DOWNTO expression DO statement
    (47) repeat_statement -> . REPEAT statement_list UNTIL expression
    (38) compound_section_block -> . BEGIN statement_list END
    (48) function_call -> . ID LPAREN argument_list RPAREN
    (52) write_statement -> . write_func LPAREN output_list RPAREN
    (55) read_statement -> . read_func LPAREN variable_list RPAREN
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (53) write_func -> . WRITE
    (54) write_func -> . WRITELN
    (56) read_func -> . READ
    (57) read_func -> . READLN

    ELSE            reduce using rule 37 (statement -> .)
    END             reduce using rule 37 (statement -> .)
    SEMI            reduce using rule 37 (statement -> .)
    UNTIL           reduce using rule 37 (statement -> .)
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    BEGIN           shift and go to state 20
    ID              shift and go to state 37
    WRITE           shift and go to state 40
    WRITELN         shift and go to state 41
    READ            shift and go to state 42
    READLN          shift and go to state 43

    statement                      shift and go to state 165
    assign_statement               shift and go to state 23
    if_statement                   shift and go to state 24
    while_statement                shift and go to state 25
    for_statement                  shift and go to state 26
    repeat_statement               shift and go to state 27
    compound_section_block         shift and go to state 28
    function_call                  shift and go to state 29
    write_statement                shift and go to state 30
    read_statement                 shift and go to state 31
    variable                       shift and go to state 32
    write_func                     shift and go to state 38
    read_func                      shift and go to state 39

state 155

    (45) for_statement -> FOR variable ASSIGN expression TO . expression DO statement
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    variable                       shift and go to state 63
    expression                     shift and go to state 166
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    function_call                  shift and go to state 69

state 156

    (46) for_statement -> FOR variable ASSIGN expression DOWNTO . expression DO statement
    (62) expression -> . logical_expression
    (63) logical_expression -> . relational_expression
    (64) logical_expression -> . logical_expression AND relational_expression
    (65) logical_expression -> . logical_expression OR relational_expression
    (66) logical_expression -> . NOT relational_expression
    (67) relational_expression -> . addition_expression
    (68) relational_expression -> . addition_expression relop addition_expression
    (75) addition_expression -> . mult_expression
    (76) addition_expression -> . addition_expression addop mult_expression
    (79) mult_expression -> . unary_expression
    (80) mult_expression -> . mult_expression mulop unary_expression
    (85) unary_expression -> . primary_expression
    (86) unary_expression -> . sign unary_expression
    (89) primary_expression -> . variable
    (90) primary_expression -> . NUMBER
    (91) primary_expression -> . STRING_LITERAL
    (92) primary_expression -> . TRUE
    (93) primary_expression -> . FALSE
    (94) primary_expression -> . LPAREN expression RPAREN
    (95) primary_expression -> . function_call
    (96) primary_expression -> . CHAR_LITERAL
    (87) sign -> . PLUS
    (88) sign -> . MINUS
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (48) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 57
    NUMBER          shift and go to state 64
    STRING_LITERAL  shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    CHAR_LITERAL    shift and go to state 70
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    ID              shift and go to state 73

    variable                       shift and go to state 63
    expression                     shift and go to state 167
    logical_expression             shift and go to state 55
    relational_expression          shift and go to state 56
    addition_expression            shift and go to state 58
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 60
    primary_expression             shift and go to state 61
    sign                           shift and go to state 62
    function_call                  shift and go to state 69

state 157

    (51) argument_list -> argument_list COMMA expression .

    RPAREN          reduce using rule 51 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 51 (argument_list -> argument_list COMMA expression .)


state 158

    (59) output_list -> output_list COMMA expression .

    RPAREN          reduce using rule 59 (output_list -> output_list COMMA expression .)
    COMMA           reduce using rule 59 (output_list -> output_list COMMA expression .)


state 159

    (61) variable_list -> variable_list COMMA variable .

    RPAREN          reduce using rule 61 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 61 (variable_list -> variable_list COMMA variable .)


state 160

    (15) type -> ARRAY LBRACK NUMBER DOTDOT . NUMBER RBRACK OF type

    NUMBER          shift and go to state 168


state 161

    (18) func_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON . type SEMI block SEMI
    (11) type -> . INTEGER
    (12) type -> . BOOLEAN
    (13) type -> . STRING
    (14) type -> . REAL
    (15) type -> . ARRAY LBRACK NUMBER DOTDOT NUMBER RBRACK OF type

    INTEGER         shift and go to state 83
    BOOLEAN         shift and go to state 84
    STRING          shift and go to state 85
    REAL            shift and go to state 86
    ARRAY           shift and go to state 87

    type                           shift and go to state 169

state 162

    (23) parameter_list -> parameter_list SEMI parameter .

    SEMI            reduce using rule 23 (parameter_list -> parameter_list SEMI parameter .)
    RPAREN          reduce using rule 23 (parameter_list -> parameter_list SEMI parameter .)


state 163

    (24) parameter -> id_list COLON type .

    SEMI            reduce using rule 24 (parameter -> id_list COLON type .)
    RPAREN          reduce using rule 24 (parameter -> id_list COLON type .)


state 164

    (19) func_declaration -> PROCEDURE ID LPAREN parameters RPAREN SEMI . block SEMI
    (2) block -> . declaration_section func_section declaration_section compound_section
    (3) block -> . declaration_section compound_section
    (4) declaration_section -> .
    (5) declaration_section -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    BEGIN           reduce using rule 4 (declaration_section -> .)
    FUNCTION        reduce using rule 4 (declaration_section -> .)
    PROCEDURE       reduce using rule 4 (declaration_section -> .)
    VAR             shift and go to state 7

  ! VAR             [ reduce using rule 4 (declaration_section -> .) ]

    block                          shift and go to state 170
    declaration_section            shift and go to state 6

state 165

    (43) if_statement -> IF expression THEN statement ELSE statement .

    END             reduce using rule 43 (if_statement -> IF expression THEN statement ELSE statement .)
    SEMI            reduce using rule 43 (if_statement -> IF expression THEN statement ELSE statement .)
    UNTIL           reduce using rule 43 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 43 (if_statement -> IF expression THEN statement ELSE statement .)


state 166

    (45) for_statement -> FOR variable ASSIGN expression TO expression . DO statement

    DO              shift and go to state 171


state 167

    (46) for_statement -> FOR variable ASSIGN expression DOWNTO expression . DO statement

    DO              shift and go to state 172


state 168

    (15) type -> ARRAY LBRACK NUMBER DOTDOT NUMBER . RBRACK OF type

    RBRACK          shift and go to state 173


state 169

    (18) func_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type . SEMI block SEMI

    SEMI            shift and go to state 174


state 170

    (19) func_declaration -> PROCEDURE ID LPAREN parameters RPAREN SEMI block . SEMI

    SEMI            shift and go to state 175


state 171

    (45) for_statement -> FOR variable ASSIGN expression TO expression DO . statement
    (28) statement -> . assign_statement
    (29) statement -> . if_statement
    (30) statement -> . while_statement
    (31) statement -> . for_statement
    (32) statement -> . repeat_statement
    (33) statement -> . compound_section_block
    (34) statement -> . function_call
    (35) statement -> . write_statement
    (36) statement -> . read_statement
    (37) statement -> .
    (39) assign_statement -> . variable ASSIGN expression
    (42) if_statement -> . IF expression THEN statement
    (43) if_statement -> . IF expression THEN statement ELSE statement
    (44) while_statement -> . WHILE expression DO statement
    (45) for_statement -> . FOR variable ASSIGN expression TO expression DO statement
    (46) for_statement -> . FOR variable ASSIGN expression DOWNTO expression DO statement
    (47) repeat_statement -> . REPEAT statement_list UNTIL expression
    (38) compound_section_block -> . BEGIN statement_list END
    (48) function_call -> . ID LPAREN argument_list RPAREN
    (52) write_statement -> . write_func LPAREN output_list RPAREN
    (55) read_statement -> . read_func LPAREN variable_list RPAREN
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (53) write_func -> . WRITE
    (54) write_func -> . WRITELN
    (56) read_func -> . READ
    (57) read_func -> . READLN

    ELSE            reduce using rule 37 (statement -> .)
    END             reduce using rule 37 (statement -> .)
    SEMI            reduce using rule 37 (statement -> .)
    UNTIL           reduce using rule 37 (statement -> .)
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    BEGIN           shift and go to state 20
    ID              shift and go to state 37
    WRITE           shift and go to state 40
    WRITELN         shift and go to state 41
    READ            shift and go to state 42
    READLN          shift and go to state 43

    variable                       shift and go to state 32
    statement                      shift and go to state 176
    assign_statement               shift and go to state 23
    if_statement                   shift and go to state 24
    while_statement                shift and go to state 25
    for_statement                  shift and go to state 26
    repeat_statement               shift and go to state 27
    compound_section_block         shift and go to state 28
    function_call                  shift and go to state 29
    write_statement                shift and go to state 30
    read_statement                 shift and go to state 31
    write_func                     shift and go to state 38
    read_func                      shift and go to state 39

state 172

    (46) for_statement -> FOR variable ASSIGN expression DOWNTO expression DO . statement
    (28) statement -> . assign_statement
    (29) statement -> . if_statement
    (30) statement -> . while_statement
    (31) statement -> . for_statement
    (32) statement -> . repeat_statement
    (33) statement -> . compound_section_block
    (34) statement -> . function_call
    (35) statement -> . write_statement
    (36) statement -> . read_statement
    (37) statement -> .
    (39) assign_statement -> . variable ASSIGN expression
    (42) if_statement -> . IF expression THEN statement
    (43) if_statement -> . IF expression THEN statement ELSE statement
    (44) while_statement -> . WHILE expression DO statement
    (45) for_statement -> . FOR variable ASSIGN expression TO expression DO statement
    (46) for_statement -> . FOR variable ASSIGN expression DOWNTO expression DO statement
    (47) repeat_statement -> . REPEAT statement_list UNTIL expression
    (38) compound_section_block -> . BEGIN statement_list END
    (48) function_call -> . ID LPAREN argument_list RPAREN
    (52) write_statement -> . write_func LPAREN output_list RPAREN
    (55) read_statement -> . read_func LPAREN variable_list RPAREN
    (40) variable -> . ID
    (41) variable -> . ID LBRACK expression RBRACK
    (53) write_func -> . WRITE
    (54) write_func -> . WRITELN
    (56) read_func -> . READ
    (57) read_func -> . READLN

    ELSE            reduce using rule 37 (statement -> .)
    END             reduce using rule 37 (statement -> .)
    SEMI            reduce using rule 37 (statement -> .)
    UNTIL           reduce using rule 37 (statement -> .)
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    REPEAT          shift and go to state 36
    BEGIN           shift and go to state 20
    ID              shift and go to state 37
    WRITE           shift and go to state 40
    WRITELN         shift and go to state 41
    READ            shift and go to state 42
    READLN          shift and go to state 43

    variable                       shift and go to state 32
    statement                      shift and go to state 177
    assign_statement               shift and go to state 23
    if_statement                   shift and go to state 24
    while_statement                shift and go to state 25
    for_statement                  shift and go to state 26
    repeat_statement               shift and go to state 27
    compound_section_block         shift and go to state 28
    function_call                  shift and go to state 29
    write_statement                shift and go to state 30
    read_statement                 shift and go to state 31
    write_func                     shift and go to state 38
    read_func                      shift and go to state 39

state 173

    (15) type -> ARRAY LBRACK NUMBER DOTDOT NUMBER RBRACK . OF type

    OF              shift and go to state 178


state 174

    (18) func_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMI . block SEMI
    (2) block -> . declaration_section func_section declaration_section compound_section
    (3) block -> . declaration_section compound_section
    (4) declaration_section -> .
    (5) declaration_section -> . VAR declaration_list

  ! shift/reduce conflict for VAR resolved as shift
    BEGIN           reduce using rule 4 (declaration_section -> .)
    FUNCTION        reduce using rule 4 (declaration_section -> .)
    PROCEDURE       reduce using rule 4 (declaration_section -> .)
    VAR             shift and go to state 7

  ! VAR             [ reduce using rule 4 (declaration_section -> .) ]

    block                          shift and go to state 179
    declaration_section            shift and go to state 6

state 175

    (19) func_declaration -> PROCEDURE ID LPAREN parameters RPAREN SEMI block SEMI .

    VAR             reduce using rule 19 (func_declaration -> PROCEDURE ID LPAREN parameters RPAREN SEMI block SEMI .)
    FUNCTION        reduce using rule 19 (func_declaration -> PROCEDURE ID LPAREN parameters RPAREN SEMI block SEMI .)
    PROCEDURE       reduce using rule 19 (func_declaration -> PROCEDURE ID LPAREN parameters RPAREN SEMI block SEMI .)
    BEGIN           reduce using rule 19 (func_declaration -> PROCEDURE ID LPAREN parameters RPAREN SEMI block SEMI .)


state 176

    (45) for_statement -> FOR variable ASSIGN expression TO expression DO statement .

    END             reduce using rule 45 (for_statement -> FOR variable ASSIGN expression TO expression DO statement .)
    SEMI            reduce using rule 45 (for_statement -> FOR variable ASSIGN expression TO expression DO statement .)
    UNTIL           reduce using rule 45 (for_statement -> FOR variable ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 45 (for_statement -> FOR variable ASSIGN expression TO expression DO statement .)


state 177

    (46) for_statement -> FOR variable ASSIGN expression DOWNTO expression DO statement .

    END             reduce using rule 46 (for_statement -> FOR variable ASSIGN expression DOWNTO expression DO statement .)
    SEMI            reduce using rule 46 (for_statement -> FOR variable ASSIGN expression DOWNTO expression DO statement .)
    UNTIL           reduce using rule 46 (for_statement -> FOR variable ASSIGN expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 46 (for_statement -> FOR variable ASSIGN expression DOWNTO expression DO statement .)


state 178

    (15) type -> ARRAY LBRACK NUMBER DOTDOT NUMBER RBRACK OF . type
    (11) type -> . INTEGER
    (12) type -> . BOOLEAN
    (13) type -> . STRING
    (14) type -> . REAL
    (15) type -> . ARRAY LBRACK NUMBER DOTDOT NUMBER RBRACK OF type

    INTEGER         shift and go to state 83
    BOOLEAN         shift and go to state 84
    STRING          shift and go to state 85
    REAL            shift and go to state 86
    ARRAY           shift and go to state 87

    type                           shift and go to state 180

state 179

    (18) func_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMI block . SEMI

    SEMI            shift and go to state 181


state 180

    (15) type -> ARRAY LBRACK NUMBER DOTDOT NUMBER RBRACK OF type .

    SEMI            reduce using rule 15 (type -> ARRAY LBRACK NUMBER DOTDOT NUMBER RBRACK OF type .)
    RPAREN          reduce using rule 15 (type -> ARRAY LBRACK NUMBER DOTDOT NUMBER RBRACK OF type .)


state 181

    (18) func_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMI block SEMI .

    VAR             reduce using rule 18 (func_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMI block SEMI .)
    FUNCTION        reduce using rule 18 (func_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMI block SEMI .)
    PROCEDURE       reduce using rule 18 (func_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMI block SEMI .)
    BEGIN           reduce using rule 18 (func_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMI block SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 4 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 6 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 132 resolved as shift
WARNING: shift/reduce conflict for VAR in state 164 resolved as shift
WARNING: shift/reduce conflict for VAR in state 174 resolved as shift

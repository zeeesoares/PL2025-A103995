
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN CHAR_LITERAL COLON COMMA DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQ FALSE FOR FUNCTION GE GT ID IF INTEGER LBRACK LE LPAREN LT MINUS MOD NE NOT NUMBER OF OR PLUS PROCEDURE PROGRAM RBRACK READ READLN REAL REPEAT RPAREN SEMI STRING STRING_LITERAL THEN TIMES TO TRUE UNTIL VAR WHILE WRITE WRITELNprogram : PROGRAM ID SEMI block DOT\n        block : declaration_section func_section declaration_section compound_section\n            | declaration_section compound_section\n        \n        declaration_section :\n                            | VAR declaration_list\n        \n        declaration_list : declaration\n                        | declaration_list declaration\n        declaration : id_list COLON type SEMI\n        id_list : ID\n                | id_list COMMA ID\n        \n        type : INTEGER\n            | BOOLEAN\n            | STRING\n            | REAL\n            | ARRAY LBRACK NUMBER DOTDOT NUMBER RBRACK OF type\n        \n        func_section :\n                    | func_section func_declaration\n        \n        func_declaration : FUNCTION ID LPAREN parameters RPAREN COLON type SEMI block SEMI\n                        | PROCEDURE ID LPAREN parameters RPAREN SEMI block SEMI\n        \n        parameters :\n                | parameter_list\n        \n        parameter_list : parameter\n                    | parameter_list SEMI parameter\n        parameter : id_list COLON typecompound_section : BEGIN statement_list END\n        statement_list : statement\n                    | statement_list SEMI statement\n        \n        statement : assign_statement\n                | if_statement\n                | while_statement\n                | for_statement\n                | repeat_statement\n                | compound_section_block\n                | function_call\n                | write_statement\n                | read_statement\n                |\n        compound_section_block : BEGIN statement_list ENDassign_statement : variable ASSIGN expression\n        \n        variable : ID\n                | ID LBRACK expression RBRACK\n        \n        if_statement : IF expression THEN statement\n                    | IF expression THEN statement ELSE statement\n        while_statement : WHILE expression DO statement\n        for_statement : FOR variable ASSIGN expression TO expression DO statement\n                    | FOR variable ASSIGN expression DOWNTO expression DO statement\n        repeat_statement : REPEAT statement_list UNTIL expressionfunction_call : ID LPAREN argument_list RPAREN\n        argument_list :\n                    | expression\n                    | argument_list COMMA expression\n        write_statement : write_func LPAREN output_list RPAREN\n        write_func : WRITE\n                | WRITELN\n        read_statement : read_func LPAREN variable_list RPAREN\n        read_func : READ\n                | READLN\n        \n        output_list : expression\n                    | output_list COMMA expression\n        \n        variable_list : variable\n                    | variable_list COMMA variable\n        expression : logical_expression\n        logical_expression : relational_expression\n                        | logical_expression AND relational_expression\n                        | logical_expression OR relational_expression\n                        |  NOT relational_expression\n        \n        relational_expression : addition_expression\n                            | addition_expression relop addition_expression\n        \n        relop : EQ\n            | NE\n            | LT\n            | LE\n            | GT\n            | GE\n        \n        addition_expression : mult_expression\n                        | addition_expression addop mult_expression\n        \n        addop : PLUS\n            | MINUS\n        \n        mult_expression : unary_expression\n                        | mult_expression mulop unary_expression\n        \n        mulop : TIMES\n            | DIVIDE\n            | DIV\n            | MOD\n        \n        unary_expression : primary_expression\n                        | sign unary_expression\n        \n        sign : PLUS\n            | MINUS\n        \n        primary_expression : variable\n                        | NUMBER\n                        | STRING_LITERAL\n                        | TRUE\n                        | FALSE\n                        | LPAREN expression RPAREN\n                        | function_call\n                        | CHAR_LITERAL\n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,8,],[0,-1,]),'ID':([2,7,11,12,13,18,19,20,33,34,35,36,44,46,52,53,57,62,68,71,72,78,79,80,81,89,90,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,115,116,117,125,143,146,148,151,154,155,156,171,172,],[3,15,37,15,-6,48,49,37,73,73,76,37,-7,88,37,73,73,73,73,-87,-88,73,73,73,76,15,15,37,73,73,73,73,-69,-70,-71,-72,-73,-74,-77,-78,73,-81,-82,-83,-84,37,73,73,-8,73,73,76,15,37,73,73,37,37,]),'SEMI':([3,10,11,20,21,22,23,24,25,26,27,28,29,30,31,36,47,50,51,52,55,56,58,59,60,61,63,64,65,66,67,69,70,73,77,82,83,84,85,86,91,92,93,94,97,113,115,128,129,132,133,134,135,136,137,138,139,141,142,144,145,147,153,154,162,163,165,169,170,171,172,176,177,179,180,],[4,-3,-37,-37,52,-26,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,52,-25,-37,-62,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,52,125,-11,-12,-13,-14,-38,-27,-39,-37,-66,-86,-37,151,-22,-42,-64,-65,-68,-76,-80,-94,-44,-47,-48,-41,-52,-55,164,-37,-23,-24,-43,174,175,-37,-37,-45,-46,181,-15,]),'BEGIN':([4,6,9,11,12,13,16,17,20,36,44,52,94,115,125,154,164,171,172,174,175,181,],[-4,11,-4,20,-5,-6,11,-17,20,20,-7,20,20,20,-8,20,-4,20,20,-4,-19,-18,]),'VAR':([4,6,9,12,13,17,44,125,164,174,175,181,],[7,-16,7,-5,-6,-17,-7,-8,7,7,-19,-18,]),'FUNCTION':([4,6,9,12,13,17,44,125,164,174,175,181,],[-4,-16,18,-5,-6,-17,-7,-8,-4,-4,-19,-18,]),'PROCEDURE':([4,6,9,12,13,17,44,125,164,174,175,181,],[-4,-16,19,-5,-6,-17,-7,-8,-4,-4,-19,-18,]),'DOT':([5,10,47,51,],[8,-3,-2,-25,]),'END':([11,20,21,22,23,24,25,26,27,28,29,30,31,50,52,55,56,58,59,60,61,63,64,65,66,67,69,70,73,91,92,93,94,97,113,115,132,133,134,135,136,137,138,139,141,142,144,145,147,154,165,171,172,176,177,],[-37,-37,51,-26,-28,-29,-30,-31,-32,-33,-34,-35,-36,91,-37,-62,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-38,-27,-39,-37,-66,-86,-37,-42,-64,-65,-68,-76,-80,-94,-44,-47,-48,-41,-52,-55,-37,-43,-37,-37,-45,-46,]),'IF':([11,20,36,52,94,115,154,171,172,],[33,33,33,33,33,33,33,33,33,]),'WHILE':([11,20,36,52,94,115,154,171,172,],[34,34,34,34,34,34,34,34,34,]),'FOR':([11,20,36,52,94,115,154,171,172,],[35,35,35,35,35,35,35,35,35,]),'REPEAT':([11,20,36,52,94,115,154,171,172,],[36,36,36,36,36,36,36,36,36,]),'WRITE':([11,20,36,52,94,115,154,171,172,],[40,40,40,40,40,40,40,40,40,]),'WRITELN':([11,20,36,52,94,115,154,171,172,],[41,41,41,41,41,41,41,41,41,]),'READ':([11,20,36,52,94,115,154,171,172,],[42,42,42,42,42,42,42,42,42,]),'READLN':([11,20,36,52,94,115,154,171,172,],[43,43,43,43,43,43,43,43,43,]),'COLON':([14,15,88,130,150,],[45,-9,-10,152,161,]),'COMMA':([14,15,55,56,58,59,60,61,63,64,65,66,67,69,70,73,76,78,88,97,113,118,119,121,122,123,124,130,133,134,135,136,137,138,142,144,157,158,159,],[46,-9,-62,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-40,-49,-10,-66,-86,143,-50,146,-58,148,-60,46,-64,-65,-68,-76,-80,-94,-48,-41,-51,-59,-61,]),'UNTIL':([22,23,24,25,26,27,28,29,30,31,36,52,55,56,58,59,60,61,63,64,65,66,67,69,70,73,77,91,92,93,94,97,113,115,132,133,134,135,136,137,138,139,141,142,144,145,147,154,165,171,172,176,177,],[-26,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-37,-62,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,117,-38,-27,-39,-37,-66,-86,-37,-42,-64,-65,-68,-76,-80,-94,-44,-47,-48,-41,-52,-55,-37,-43,-37,-37,-45,-46,]),'ELSE':([23,24,25,26,27,28,29,30,31,55,56,58,59,60,61,63,64,65,66,67,69,70,73,91,93,94,97,113,115,132,133,134,135,136,137,138,139,141,142,144,145,147,154,165,171,172,176,177,],[-28,-29,-30,-31,-32,-33,-34,-35,-36,-62,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-38,-39,-37,-66,-86,-37,154,-64,-65,-68,-76,-80,-94,-44,-47,-48,-41,-52,-55,-37,-43,-37,-37,-45,-46,]),'ASSIGN':([32,37,75,76,144,],[53,-40,116,-40,-41,]),'NOT':([33,34,53,68,78,79,80,116,117,143,146,155,156,],[57,57,57,57,57,57,57,57,57,57,57,57,57,]),'NUMBER':([33,34,53,57,62,68,71,72,78,79,80,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,117,126,143,146,155,156,160,],[64,64,64,64,64,64,-87,-88,64,64,64,64,64,64,64,-69,-70,-71,-72,-73,-74,-77,-78,64,-81,-82,-83,-84,64,64,149,64,64,64,64,168,]),'STRING_LITERAL':([33,34,53,57,62,68,71,72,78,79,80,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,117,143,146,155,156,],[65,65,65,65,65,65,-87,-88,65,65,65,65,65,65,65,-69,-70,-71,-72,-73,-74,-77,-78,65,-81,-82,-83,-84,65,65,65,65,65,65,]),'TRUE':([33,34,53,57,62,68,71,72,78,79,80,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,117,143,146,155,156,],[66,66,66,66,66,66,-87,-88,66,66,66,66,66,66,66,-69,-70,-71,-72,-73,-74,-77,-78,66,-81,-82,-83,-84,66,66,66,66,66,66,]),'FALSE':([33,34,53,57,62,68,71,72,78,79,80,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,117,143,146,155,156,],[67,67,67,67,67,67,-87,-88,67,67,67,67,67,67,67,-69,-70,-71,-72,-73,-74,-77,-78,67,-81,-82,-83,-84,67,67,67,67,67,67,]),'LPAREN':([33,34,37,38,39,40,41,42,43,48,49,53,57,62,68,71,72,73,78,79,80,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,117,143,146,155,156,],[68,68,78,80,81,-53,-54,-56,-57,89,90,68,68,68,68,-87,-88,78,68,68,68,68,68,68,68,-69,-70,-71,-72,-73,-74,-77,-78,68,-81,-82,-83,-84,68,68,68,68,68,68,]),'CHAR_LITERAL':([33,34,53,57,62,68,71,72,78,79,80,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,117,143,146,155,156,],[70,70,70,70,70,70,-87,-88,70,70,70,70,70,70,70,-69,-70,-71,-72,-73,-74,-77,-78,70,-81,-82,-83,-84,70,70,70,70,70,70,]),'PLUS':([33,34,53,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,78,79,80,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,135,136,137,138,142,143,144,146,155,156,],[71,71,71,71,106,-75,-79,-85,71,-89,-90,-91,-92,-93,71,-95,-96,-87,-88,-40,71,71,71,71,71,71,71,-69,-70,-71,-72,-73,-74,-77,-78,71,-81,-82,-83,-84,-86,71,71,106,-76,-80,-94,-48,71,-41,71,71,71,]),'MINUS':([33,34,53,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,78,79,80,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,135,136,137,138,142,143,144,146,155,156,],[72,72,72,72,107,-75,-79,-85,72,-89,-90,-91,-92,-93,72,-95,-96,-87,-88,-40,72,72,72,72,72,72,72,-69,-70,-71,-72,-73,-74,-77,-78,72,-81,-82,-83,-84,-86,72,72,107,-76,-80,-94,-48,72,-41,72,72,72,]),'LBRACK':([37,73,76,87,],[79,79,79,126,]),'INTEGER':([45,152,161,178,],[83,83,83,83,]),'BOOLEAN':([45,152,161,178,],[84,84,84,84,]),'STRING':([45,152,161,178,],[85,85,85,85,]),'REAL':([45,152,161,178,],[86,86,86,86,]),'ARRAY':([45,152,161,178,],[87,87,87,87,]),'THEN':([54,55,56,58,59,60,61,63,64,65,66,67,69,70,73,97,113,133,134,135,136,137,138,142,144,],[94,-62,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-66,-86,-64,-65,-68,-76,-80,-94,-48,-41,]),'DO':([55,56,58,59,60,61,63,64,65,66,67,69,70,73,74,97,113,133,134,135,136,137,138,142,144,166,167,],[-62,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,115,-66,-86,-64,-65,-68,-76,-80,-94,-48,-41,171,172,]),'RPAREN':([55,56,58,59,60,61,63,64,65,66,67,69,70,73,76,78,83,84,85,86,89,90,97,113,114,118,119,121,122,123,124,127,128,129,131,133,134,135,136,137,138,142,144,157,158,159,162,163,180,],[-62,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-40,-49,-11,-12,-13,-14,-20,-20,-66,-86,138,142,-50,145,-58,147,-60,150,-21,-22,153,-64,-65,-68,-76,-80,-94,-48,-41,-51,-59,-61,-23,-24,-15,]),'RBRACK':([55,56,58,59,60,61,63,64,65,66,67,69,70,73,97,113,120,133,134,135,136,137,138,142,144,168,],[-62,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-66,-86,144,-64,-65,-68,-76,-80,-94,-48,-41,173,]),'TO':([55,56,58,59,60,61,63,64,65,66,67,69,70,73,97,113,133,134,135,136,137,138,140,142,144,],[-62,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-66,-86,-64,-65,-68,-76,-80,-94,155,-48,-41,]),'DOWNTO':([55,56,58,59,60,61,63,64,65,66,67,69,70,73,97,113,133,134,135,136,137,138,140,142,144,],[-62,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-66,-86,-64,-65,-68,-76,-80,-94,156,-48,-41,]),'AND':([55,56,58,59,60,61,63,64,65,66,67,69,70,73,97,113,133,134,135,136,137,138,142,144,],[95,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-66,-86,-64,-65,-68,-76,-80,-94,-48,-41,]),'OR':([55,56,58,59,60,61,63,64,65,66,67,69,70,73,97,113,133,134,135,136,137,138,142,144,],[96,-63,-67,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-66,-86,-64,-65,-68,-76,-80,-94,-48,-41,]),'EQ':([58,59,60,61,63,64,65,66,67,69,70,73,113,136,137,138,142,144,],[100,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-86,-76,-80,-94,-48,-41,]),'NE':([58,59,60,61,63,64,65,66,67,69,70,73,113,136,137,138,142,144,],[101,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-86,-76,-80,-94,-48,-41,]),'LT':([58,59,60,61,63,64,65,66,67,69,70,73,113,136,137,138,142,144,],[102,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-86,-76,-80,-94,-48,-41,]),'LE':([58,59,60,61,63,64,65,66,67,69,70,73,113,136,137,138,142,144,],[103,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-86,-76,-80,-94,-48,-41,]),'GT':([58,59,60,61,63,64,65,66,67,69,70,73,113,136,137,138,142,144,],[104,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-86,-76,-80,-94,-48,-41,]),'GE':([58,59,60,61,63,64,65,66,67,69,70,73,113,136,137,138,142,144,],[105,-75,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-86,-76,-80,-94,-48,-41,]),'TIMES':([59,60,61,63,64,65,66,67,69,70,73,113,136,137,138,142,144,],[109,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-86,109,-80,-94,-48,-41,]),'DIVIDE':([59,60,61,63,64,65,66,67,69,70,73,113,136,137,138,142,144,],[110,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-86,110,-80,-94,-48,-41,]),'DIV':([59,60,61,63,64,65,66,67,69,70,73,113,136,137,138,142,144,],[111,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-86,111,-80,-94,-48,-41,]),'MOD':([59,60,61,63,64,65,66,67,69,70,73,113,136,137,138,142,144,],[112,-79,-85,-89,-90,-91,-92,-93,-95,-96,-40,-86,112,-80,-94,-48,-41,]),'DOTDOT':([149,],[160,]),'OF':([173,],[178,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,164,174,],[5,170,179,]),'declaration_section':([4,9,164,174,],[6,16,6,6,]),'func_section':([6,],[9,]),'compound_section':([6,16,],[10,47,]),'declaration_list':([7,],[12,]),'declaration':([7,12,],[13,44,]),'id_list':([7,12,89,90,151,],[14,14,130,130,130,]),'func_declaration':([9,],[17,]),'statement_list':([11,20,36,],[21,50,77,]),'statement':([11,20,36,52,94,115,154,171,172,],[22,22,22,92,132,139,165,176,177,]),'assign_statement':([11,20,36,52,94,115,154,171,172,],[23,23,23,23,23,23,23,23,23,]),'if_statement':([11,20,36,52,94,115,154,171,172,],[24,24,24,24,24,24,24,24,24,]),'while_statement':([11,20,36,52,94,115,154,171,172,],[25,25,25,25,25,25,25,25,25,]),'for_statement':([11,20,36,52,94,115,154,171,172,],[26,26,26,26,26,26,26,26,26,]),'repeat_statement':([11,20,36,52,94,115,154,171,172,],[27,27,27,27,27,27,27,27,27,]),'compound_section_block':([11,20,36,52,94,115,154,171,172,],[28,28,28,28,28,28,28,28,28,]),'function_call':([11,20,33,34,36,52,53,57,62,68,78,79,80,94,95,96,98,99,108,115,116,117,143,146,154,155,156,171,172,],[29,29,69,69,29,29,69,69,69,69,69,69,69,29,69,69,69,69,69,29,69,69,69,69,29,69,69,29,29,]),'write_statement':([11,20,36,52,94,115,154,171,172,],[30,30,30,30,30,30,30,30,30,]),'read_statement':([11,20,36,52,94,115,154,171,172,],[31,31,31,31,31,31,31,31,31,]),'variable':([11,20,33,34,35,36,52,53,57,62,68,78,79,80,81,94,95,96,98,99,108,115,116,117,143,146,148,154,155,156,171,172,],[32,32,63,63,75,32,32,63,63,63,63,63,63,63,124,32,63,63,63,63,63,32,63,63,63,63,159,32,63,63,32,32,]),'write_func':([11,20,36,52,94,115,154,171,172,],[38,38,38,38,38,38,38,38,38,]),'read_func':([11,20,36,52,94,115,154,171,172,],[39,39,39,39,39,39,39,39,39,]),'expression':([33,34,53,68,78,79,80,116,117,143,146,155,156,],[54,74,93,114,119,120,122,140,141,157,158,166,167,]),'logical_expression':([33,34,53,68,78,79,80,116,117,143,146,155,156,],[55,55,55,55,55,55,55,55,55,55,55,55,55,]),'relational_expression':([33,34,53,57,68,78,79,80,95,96,116,117,143,146,155,156,],[56,56,56,97,56,56,56,56,133,134,56,56,56,56,56,56,]),'addition_expression':([33,34,53,57,68,78,79,80,95,96,98,116,117,143,146,155,156,],[58,58,58,58,58,58,58,58,58,58,135,58,58,58,58,58,58,]),'mult_expression':([33,34,53,57,68,78,79,80,95,96,98,99,116,117,143,146,155,156,],[59,59,59,59,59,59,59,59,59,59,59,136,59,59,59,59,59,59,]),'unary_expression':([33,34,53,57,62,68,78,79,80,95,96,98,99,108,116,117,143,146,155,156,],[60,60,60,60,113,60,60,60,60,60,60,60,60,137,60,60,60,60,60,60,]),'primary_expression':([33,34,53,57,62,68,78,79,80,95,96,98,99,108,116,117,143,146,155,156,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'sign':([33,34,53,57,62,68,78,79,80,95,96,98,99,108,116,117,143,146,155,156,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'type':([45,152,161,178,],[82,163,169,180,]),'relop':([58,],[98,]),'addop':([58,135,],[99,99,]),'mulop':([59,136,],[108,108,]),'argument_list':([78,],[118,]),'output_list':([80,],[121,]),'variable_list':([81,],[123,]),'parameters':([89,90,],[127,131,]),'parameter_list':([89,90,],[128,128,]),'parameter':([89,90,151,],[129,129,162,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMI block DOT','program',5,'p_program','anasin.py',44),
  ('block -> declaration_section func_section declaration_section compound_section','block',4,'p_block','anasin.py',49),
  ('block -> declaration_section compound_section','block',2,'p_block','anasin.py',50),
  ('declaration_section -> <empty>','declaration_section',0,'p_declaration_section','anasin.py',59),
  ('declaration_section -> VAR declaration_list','declaration_section',2,'p_declaration_section','anasin.py',60),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','anasin.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','anasin.py',70),
  ('declaration -> id_list COLON type SEMI','declaration',4,'p_declaration','anasin.py',78),
  ('id_list -> ID','id_list',1,'p_id_list','anasin.py',90),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','anasin.py',91),
  ('type -> INTEGER','type',1,'p_type','anasin.py',102),
  ('type -> BOOLEAN','type',1,'p_type','anasin.py',103),
  ('type -> STRING','type',1,'p_type','anasin.py',104),
  ('type -> REAL','type',1,'p_type','anasin.py',105),
  ('type -> ARRAY LBRACK NUMBER DOTDOT NUMBER RBRACK OF type','type',8,'p_type','anasin.py',106),
  ('func_section -> <empty>','func_section',0,'p_func_section','anasin.py',124),
  ('func_section -> func_section func_declaration','func_section',2,'p_func_section','anasin.py',125),
  ('func_declaration -> FUNCTION ID LPAREN parameters RPAREN COLON type SEMI block SEMI','func_declaration',10,'p_func_declaration','anasin.py',134),
  ('func_declaration -> PROCEDURE ID LPAREN parameters RPAREN SEMI block SEMI','func_declaration',8,'p_func_declaration','anasin.py',135),
  ('parameters -> <empty>','parameters',0,'p_parameters','anasin.py',144),
  ('parameters -> parameter_list','parameters',1,'p_parameters','anasin.py',145),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','anasin.py',151),
  ('parameter_list -> parameter_list SEMI parameter','parameter_list',3,'p_parameter_list','anasin.py',152),
  ('parameter -> id_list COLON type','parameter',3,'p_parameter','anasin.py',160),
  ('compound_section -> BEGIN statement_list END','compound_section',3,'p_compound_section','anasin.py',164),
  ('statement_list -> statement','statement_list',1,'p_statement_list','anasin.py',181),
  ('statement_list -> statement_list SEMI statement','statement_list',3,'p_statement_list','anasin.py',182),
  ('statement -> assign_statement','statement',1,'p_statement','anasin.py',191),
  ('statement -> if_statement','statement',1,'p_statement','anasin.py',192),
  ('statement -> while_statement','statement',1,'p_statement','anasin.py',193),
  ('statement -> for_statement','statement',1,'p_statement','anasin.py',194),
  ('statement -> repeat_statement','statement',1,'p_statement','anasin.py',195),
  ('statement -> compound_section_block','statement',1,'p_statement','anasin.py',196),
  ('statement -> function_call','statement',1,'p_statement','anasin.py',197),
  ('statement -> write_statement','statement',1,'p_statement','anasin.py',198),
  ('statement -> read_statement','statement',1,'p_statement','anasin.py',199),
  ('statement -> <empty>','statement',0,'p_statement','anasin.py',200),
  ('compound_section_block -> BEGIN statement_list END','compound_section_block',3,'p_compound_section_block','anasin.py',208),
  ('assign_statement -> variable ASSIGN expression','assign_statement',3,'p_assign_statement','anasin.py',224),
  ('variable -> ID','variable',1,'p_variable','anasin.py',230),
  ('variable -> ID LBRACK expression RBRACK','variable',4,'p_variable','anasin.py',231),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','anasin.py',247),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','anasin.py',248),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','anasin.py',256),
  ('for_statement -> FOR variable ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','anasin.py',261),
  ('for_statement -> FOR variable ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','anasin.py',262),
  ('repeat_statement -> REPEAT statement_list UNTIL expression','repeat_statement',4,'p_repeat_statement','anasin.py',270),
  ('function_call -> ID LPAREN argument_list RPAREN','function_call',4,'p_function_call','anasin.py',274),
  ('argument_list -> <empty>','argument_list',0,'p_argument_list','anasin.py',279),
  ('argument_list -> expression','argument_list',1,'p_argument_list','anasin.py',280),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','anasin.py',281),
  ('write_statement -> write_func LPAREN output_list RPAREN','write_statement',4,'p_write_statement','anasin.py',291),
  ('write_func -> WRITE','write_func',1,'p_write_func','anasin.py',296),
  ('write_func -> WRITELN','write_func',1,'p_write_func','anasin.py',297),
  ('read_statement -> read_func LPAREN variable_list RPAREN','read_statement',4,'p_read_statement','anasin.py',302),
  ('read_func -> READ','read_func',1,'p_read_func','anasin.py',307),
  ('read_func -> READLN','read_func',1,'p_read_func','anasin.py',308),
  ('output_list -> expression','output_list',1,'p_output_list','anasin.py',314),
  ('output_list -> output_list COMMA expression','output_list',3,'p_output_list','anasin.py',315),
  ('variable_list -> variable','variable_list',1,'p_variable_list','anasin.py',324),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','anasin.py',325),
  ('expression -> logical_expression','expression',1,'p_expression','anasin.py',333),
  ('logical_expression -> relational_expression','logical_expression',1,'p_logical_expression','anasin.py',338),
  ('logical_expression -> logical_expression AND relational_expression','logical_expression',3,'p_logical_expression','anasin.py',339),
  ('logical_expression -> logical_expression OR relational_expression','logical_expression',3,'p_logical_expression','anasin.py',340),
  ('logical_expression -> NOT relational_expression','logical_expression',2,'p_logical_expression','anasin.py',341),
  ('relational_expression -> addition_expression','relational_expression',1,'p_relational_expression','anasin.py',352),
  ('relational_expression -> addition_expression relop addition_expression','relational_expression',3,'p_relational_expression','anasin.py',353),
  ('relop -> EQ','relop',1,'p_relop','anasin.py',362),
  ('relop -> NE','relop',1,'p_relop','anasin.py',363),
  ('relop -> LT','relop',1,'p_relop','anasin.py',364),
  ('relop -> LE','relop',1,'p_relop','anasin.py',365),
  ('relop -> GT','relop',1,'p_relop','anasin.py',366),
  ('relop -> GE','relop',1,'p_relop','anasin.py',367),
  ('addition_expression -> mult_expression','addition_expression',1,'p_addition_expression','anasin.py',373),
  ('addition_expression -> addition_expression addop mult_expression','addition_expression',3,'p_addition_expression','anasin.py',374),
  ('addop -> PLUS','addop',1,'p_addop','anasin.py',383),
  ('addop -> MINUS','addop',1,'p_addop','anasin.py',384),
  ('mult_expression -> unary_expression','mult_expression',1,'p_mult_expression','anasin.py',390),
  ('mult_expression -> mult_expression mulop unary_expression','mult_expression',3,'p_mult_expression','anasin.py',391),
  ('mulop -> TIMES','mulop',1,'p_mulop','anasin.py',400),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','anasin.py',401),
  ('mulop -> DIV','mulop',1,'p_mulop','anasin.py',402),
  ('mulop -> MOD','mulop',1,'p_mulop','anasin.py',403),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','anasin.py',409),
  ('unary_expression -> sign unary_expression','unary_expression',2,'p_unary_expression','anasin.py',410),
  ('sign -> PLUS','sign',1,'p_sign','anasin.py',419),
  ('sign -> MINUS','sign',1,'p_sign','anasin.py',420),
  ('primary_expression -> variable','primary_expression',1,'p_primary_expression','anasin.py',426),
  ('primary_expression -> NUMBER','primary_expression',1,'p_primary_expression','anasin.py',427),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','anasin.py',428),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','anasin.py',429),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','anasin.py',430),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','anasin.py',431),
  ('primary_expression -> function_call','primary_expression',1,'p_primary_expression','anasin.py',432),
  ('primary_expression -> CHAR_LITERAL','primary_expression',1,'p_primary_expression','anasin.py',433),
]
